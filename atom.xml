<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ihopefulchina.github.io</id>
    <title>Ihopeful Blog</title>
    <updated>2019-09-04T03:33:21.157Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ihopefulchina.github.io"/>
    <link rel="self" href="https://ihopefulchina.github.io/atom.xml"/>
    <subtitle>纪录个人所见所闻所得</subtitle>
    <logo>https://ihopefulchina.github.io/images/avatar.png</logo>
    <icon>https://ihopefulchina.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, Ihopeful Blog</rights>
    <entry>
        <title type="html"><![CDATA[ Vue学习(十): v-for中key的使用注意事项]]></title>
        <id>https://ihopefulchina.github.io/post/vue-xue-xi-shi-v-for-zhong-key-de-shi-yong-zhu-yi-shi-xiang</id>
        <link href="https://ihopefulchina.github.io/post/vue-xue-xi-shi-v-for-zhong-key-de-shi-yong-zhu-yi-shi-xiang">
        </link>
        <updated>2019-09-04T02:56:20.000Z</updated>
        <content type="html"><![CDATA[<p><strong>在2.20+的版本里，当组件使用v-for时候，key现在是必须的。</strong><br>
当Vue.js 用v-for 正在更新已渲染过的元素列表中时， 它默认用&quot;<strong>就地复用</strong>&quot;策略。如果数据项的顺序被改变，Vue将<strong>不是移动DOM元素来匹配数据项的顺序</strong>，而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。</p>
<p>为了给Vue一个提示，<strong>以便它能跟踪每个节点的身份，从而重用和重新排序现有元素</strong>，你需要为每个项<strong>提供一个唯一key属性</strong>。</p>
<p>代码示例</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id=&quot;app&quot;&gt;
        &lt;div&gt;
            &lt;label&gt;ID:
                &lt;input type=&quot;text&quot; v-model=&quot;id&quot;&gt;
            &lt;/label&gt;
            &lt;label&gt;name:
                    &lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;
            &lt;/label&gt;
            &lt;input type=&quot;button&quot; value=&quot;添加&quot; @click=&quot;add1&quot;&gt;
        &lt;/div&gt;
        &lt;!--v-for循环的时候，只能用number或string--&gt;
        &lt;!--key 在使用的时候，必须使用v-bind属性绑定的形式，指定key值--&gt;
        &lt;!--在组件中，使用v-for循环的时候，或者在一些特殊情况中，如果v-for有问题，必须要在使用v-for的同时，需要指定唯一的字符串/数字 类型 :key 值--&gt;
        &lt;p v-for=&quot;item in list&quot; :key=&quot;item.id&quot;&gt;
            &lt;input type=&quot;checkbox&quot;&gt;
            ID: {{item.id}} , name: {{item.name}}
        &lt;/p&gt;
    &lt;/div&gt;
    &lt;script&gt;
        var vm = new Vue({
            el: '#app',
            data:{
                id:'',
                name:'',
                list:[
                {id:1,name: 'a'},
                {id:2,name: 'b'},
                {id:3,name: 'c'},
                {id:4,name: 'd'},
                {id:5,name: 'e'}
                ]
            },
            methods:{
                add(){//添加
                    this.list.push({id: this.id,name: this.name})
                },
                add1(){//添加
                    this.list.unshift
                    ({id: this.id,name: this.name})
                }
            }
        })
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p><img src="https://ihopefulchina.github.io/post-images/1567567577054.png" alt=""></p>
<ol>
<li>key 在使用的时候，必须使用v-bind属性绑定的形式，指定key值。</li>
<li>key 在使用的时候，必须使用v-bind属性绑定的形式，指定key值</li>
<li>当使用<code>this.list.unshift({id: this.id,name: this.name})</code> 添加按钮事件，未绑定<code>v-bind:key=&quot;item.id&quot;</code>时候，会出现 例如:选择id为4，添加一个后，会上移到id为3<br>
<img src="https://ihopefulchina.github.io/post-images/1567567769781.png" alt=""><br>
=》<img src="https://ihopefulchina.github.io/post-images/1567567786556.png" alt=""></li>
<li>如果是<code>&lt;p v-for=&quot;item in list&quot; :key=&quot;item&quot;&gt;</code> 会出现错误，是因为<strong>在组件中，使用v-for循环的时候，或者在一些特殊情况中，如果v-for有问题，必须要在使用v-for的同时，需要指定唯一的字符串/数字 类型 :key 值</strong></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue学习(九): v-for指令的四种使用方式]]></title>
        <id>https://ihopefulchina.github.io/post/v-for-zhi-ling-de-si-chong-shi-yong-fang-shi</id>
        <link href="https://ihopefulchina.github.io/post/v-for-zhi-ling-de-si-chong-shi-yong-fang-shi">
        </link>
        <updated>2019-09-04T01:43:33.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="v-for循环普通数组">v-for循环普通数组</h3>
<ol>
<li>直接循环输出数组内容<br>
<code>&lt;p v-for=&quot;item in list&quot;&gt;这是数组内容:{{item}}&lt;/p&gt;</code><br>
<code>list:[1,2,3,4,5,6]</code></li>
</ol>
]]></summary>
        <content type="html"><![CDATA[<h3 id="v-for循环普通数组">v-for循环普通数组</h3>
<ol>
<li>直接循环输出数组内容<br>
<code>&lt;p v-for=&quot;item in list&quot;&gt;这是数组内容:{{item}}&lt;/p&gt;</code><br>
<code>list:[1,2,3,4,5,6]</code></li>
</ol>
<!-- more -->
<p><img src="https://ihopefulchina.github.io/post-images/1567565625748.png" alt=""></p>
<ol start="2">
<li>添加索引值</li>
</ol>
<pre><code>&lt;p v-for=&quot;(item,i) in list&quot;&gt;这是数组的索引值:{{i}},这是数组内容:{{item}}&lt;/p&gt;
</code></pre>
<p><img src="https://ihopefulchina.github.io/post-images/1567565637948.png" alt=""></p>
<h3 id="v-for循环对象数组">v-for循环对象数组</h3>
<pre><code>&lt;p v-for=&quot;(user,i) in list&quot;&gt;索引值:{{i}}, 用户ID:{{user.id}}, 用户名称:{{user.name}}&lt;/p&gt;
</code></pre>
<pre><code>list:[
                    {id:1,name:&quot;a&quot;},
                    {id:2,name:&quot;b&quot;},
                    {id:3,name:&quot;c&quot;},
                    {id:4,name:&quot;d&quot;},
                ]
</code></pre>
<p><img src="https://ihopefulchina.github.io/post-images/1567565605644.png" alt=""></p>
<h3 id="v-for循环对象">v-for循环对象</h3>
<p>在遍历对象身上的键值得时候，可以有val key 还有索引</p>
<pre><code>&lt;p v-for=&quot;(val, key, i) in user&quot;&gt;索引值:{{i}}, 键:{{key}}, 值: {{val}}&lt;/p&gt;
</code></pre>
<pre><code>user:{
                id:1,
                name: 'a',
                gender: 'boy'
            }
</code></pre>
<p><img src="https://ihopefulchina.github.io/post-images/1567565526584.png" alt=""></p>
<h3 id="v-for迭代数字">v-for迭代数字</h3>
<p>in 后面可以放普通数组，对象数组，对象和数字。<br>
迭代数字从1开始</p>
<pre><code>&lt;p v-for=&quot;count in 10&quot;&gt;这是第 {{count}} 次循环&lt;/p&gt;
</code></pre>
<p><img src="https://ihopefulchina.github.io/post-images/1567565579174.png" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ Vue学习(八): Vue中的使用样式]]></title>
        <id>https://ihopefulchina.github.io/post/vue-xue-xi-ba-vue-zhong-de-shi-yong-yang-shi</id>
        <link href="https://ihopefulchina.github.io/post/vue-xue-xi-ba-vue-zhong-de-shi-yong-yang-shi">
        </link>
        <updated>2019-09-03T07:32:02.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="使用class样式">使用Class样式</h3>
<ol>
<li>
<p>数组<br>
<code>&lt;h1 :class=&quot;['red','thin']&quot;&gt;这是H1&lt;/h1&gt;</code></p>
</li>
<li>
<p>数组里面的三元表达式</p>
</li>
</ol>
<pre><code>&lt;h1 :class=&quot;['red','thin',flag?'active':'']&quot;&gt;这是H1&lt;/h1&gt;
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<h3 id="使用class样式">使用Class样式</h3>
<ol>
<li>
<p>数组<br>
<code>&lt;h1 :class=&quot;['red','thin']&quot;&gt;这是H1&lt;/h1&gt;</code></p>
</li>
<li>
<p>数组里面的三元表达式</p>
</li>
</ol>
<pre><code>&lt;h1 :class=&quot;['red','thin',flag?'active':'']&quot;&gt;这是H1&lt;/h1&gt;
</code></pre>
<!-- more -->
<ol start="3">
<li>
<p>数组使用对象代替三元表达式，提高代码的可读性<br>
<code>&lt;h1 :class=&quot;['red','thin',{'active':flag} ]&quot;&gt;这是H1&lt;/h1&gt;</code></p>
</li>
<li>
<p>直接对象<br>
在为class使用v-bind绑定对象的时候，对象的属性是类名，对象的属性可以不需要引号；属性的值是一个标识符</p>
</li>
</ol>
<pre><code>&lt;h1 :class=&quot;{red:false, thin: true, italic:true, active:false}&quot;&gt;这是H1&lt;/h1&gt;
</code></pre>
<p>代码示例</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;style&gt;
    .red{
        color:red;
    }
    .thin{
        font-weight: 100;
    }
    .italic{
        font-style: italic
    }
    .active{
        letter-spacing: 0.5em;
    }
    &lt;/style&gt;
&lt;/body&gt;
&lt;div id=&quot;app&quot;&gt;
     &lt;!--数组--&gt;
    &lt;h1 :class=&quot;['red','thin']&quot;&gt;这是H1&lt;/h1&gt;
    &lt;!--三元表达式--&gt;
    &lt;h1 :class=&quot;['red','thin',flag?'active':'']&quot;&gt;这是H1&lt;/h1&gt;
    &lt;!--数组使用对象代替三元表达式，提高代码的可读性--&gt;
    &lt;h1 :class=&quot;['red','thin',{'active':flag} ]&quot;&gt;这是H1&lt;/h1&gt;
    &lt;!--对象--&gt;
    &lt;h1 :class=&quot;{red:false, thin: true, italic:true, active:false}&quot;&gt;这是H1&lt;/h1&gt;
     &lt;!--直接指向--&gt;
     &lt;h1 :class=&quot;classobj&quot;&gt;这是H1&lt;/h1&gt;
&lt;/div&gt;
&lt;script&gt;
var vm = new Vue({
    el: '#app',
    data:{
        flag : true,
        classobj: {red:false, thin: true, italic:true, active:false}
    },
    methods:{

    }
})
&lt;/script&gt;
&lt;/html&gt;
</code></pre>
<h3 id="使用内联样式">使用内联样式</h3>
<ol>
<li>直接在元素上通过<code>:style</code> 的形式，书写样式对象<br>
<code>&lt;h1 :style=&quot;{ color:'red', 'font-weight':100 }&quot;&gt;这是H1&lt;/h1&gt;</code></li>
<li>将样式对象，定义到<code>data</code>中，并直接引用到<code>:style</code> 中</li>
</ol>
<pre><code>&lt;div id=&quot;app&quot;&gt;
        &lt;!--对象就是无序键值对的集合--&gt;
        &lt;h1 :style=&quot;styleobj&quot;&gt;这是H1&lt;/h1&gt;
    &lt;/div&gt;
    &lt;script&gt;
    var vm = new Vue({
        el: '#app',
        data:{
            styleobj : { color:'red', 'font-weight':100 }
        },
        methods:{

        }
    })
    &lt;/script&gt;
</code></pre>
<ol start="3">
<li>在<code>:style</code> 中通过数组引用多个 <code>data</code> 上的样式对象</li>
</ol>
<pre><code>&lt;div id=&quot;app&quot;&gt;
        &lt;!--对象就是无序键值对的集合--&gt;
        &lt;h1 :style=&quot;[styleobj,styleobj2]&quot;&gt;这是H1&lt;/h1&gt;
    &lt;/div&gt;
    &lt;script&gt;
    var vm = new Vue({
        el: '#app',
        data:{
            styleobj : { color:'red', 'font-weight':100 },
            styleobj2 : { 'font-style': 'italic' }
        },
        methods:{

        }
    })
    &lt;/script&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue学习(七): 简易计算器案例]]></title>
        <id>https://ihopefulchina.github.io/post/vue-xue-xi-qi-jian-yi-ji-suan-qi-an-li</id>
        <link href="https://ihopefulchina.github.io/post/vue-xue-xi-qi-jian-yi-ji-suan-qi-an-li">
        </link>
        <updated>2019-09-03T06:57:17.000Z</updated>
        <summary type="html"><![CDATA[<p>简易计算器案例很简陋，目的是为了加深学习v-model 数据双向绑定</p>
]]></summary>
        <content type="html"><![CDATA[<p>简易计算器案例很简陋，目的是为了加深学习v-model 数据双向绑定</p>
<!-- more -->
<h3 id="第一种写法">第一种写法</h3>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id=&quot;app&quot;&gt;
        &lt;input type=&quot;text&quot; v-model=&quot;n1&quot;&gt;
        &lt;select v-model=&quot;opt&quot;&gt;
            &lt;option value=&quot;+&quot;&gt;+&lt;/option&gt;
            &lt;option value=&quot;-&quot;&gt;-&lt;/option&gt;
            &lt;option value=&quot;*&quot;&gt;*&lt;/option&gt;
            &lt;option value=&quot;/&quot;&gt;/&lt;/option&gt;
        &lt;/select&gt;
        &lt;input type=&quot;text&quot; v-model=&quot;n2&quot;&gt;
        &lt;input type=&quot;button&quot; value=&quot;=&quot; @click=&quot;calc&quot;&gt;
        &lt;input type=&quot;text&quot; v-model=&quot;result&quot;&gt;
    &lt;/div&gt;
    &lt;script&gt;
    var vm = new Vue({
        el: '#app',
        data:{
            n1: 0,
            n2: 0,
            result: 0,
            opt:'+'
        },
        methods:{
            calc(){//计算器算数的方法
                //逻辑:
                //拿到n1,opt,n2值,this.result值计算
                switch(this.opt){
                    case '+':
                        this.result= parseInt(this.n1) + parseInt(this.n2)
                        break;
                    case '-':
                        this.result= parseInt(this.n1) - parseInt(this.n2)
                        break;
                    case '*':
                        this.result= parseInt(this.n1) * parseInt(this.n2)
                        break;
                    case '/':
                        this.result= parseInt(this.n1) / parseInt(this.n2)
                        break;
                }
            }
        }
    })
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="第二种有点投机取巧正式开发中最好不要这样操作">第二种有点投机取巧，正式开发中，最好不要这样操作</h3>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id=&quot;app&quot;&gt;
        &lt;input type=&quot;text&quot; v-model=&quot;n1&quot;&gt;
        &lt;select v-model=&quot;opt&quot;&gt;
            &lt;option value=&quot;+&quot;&gt;+&lt;/option&gt;
            &lt;option value=&quot;-&quot;&gt;-&lt;/option&gt;
            &lt;option value=&quot;*&quot;&gt;*&lt;/option&gt;
            &lt;option value=&quot;/&quot;&gt;/&lt;/option&gt;
        &lt;/select&gt;
        &lt;input type=&quot;text&quot; v-model=&quot;n2&quot;&gt;
        &lt;input type=&quot;button&quot; value=&quot;=&quot; @click=&quot;calc&quot;&gt;
        &lt;input type=&quot;text&quot; v-model=&quot;result&quot;&gt;
    &lt;/div&gt;
    &lt;script&gt;
    var vm = new Vue({
        el: '#app',
        data:{
            n1: 0,
            n2: 0,
            result: 0,
            opt:'+'
        },
        methods:{
            calc(){//计算器算数的方法
                //逻辑:
                //拿到n1,opt,n2值,this.result值计算
                var codeStr = 'parseInt(this.n1) ' +  this.opt + ' parseInt(this.n2)'
                this.result= eval(codeStr)
            }
        }
    })
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue学习(六): v-model实现表单元素的数据双向绑定]]></title>
        <id>https://ihopefulchina.github.io/post/vue-xue-xi-wu-v-model-shi-xian-biao-dan-yuan-su-de-shu-ju-shuang-xiang-bang-ding</id>
        <link href="https://ihopefulchina.github.io/post/vue-xue-xi-wu-v-model-shi-xian-biao-dan-yuan-su-de-shu-ju-shuang-xiang-bang-ding">
        </link>
        <updated>2019-09-03T06:52:30.000Z</updated>
        <summary type="html"><![CDATA[<p>v-model指令，可以实现表单元素和Model中数据的双向数据绑定，但v-model只能运用到表单元素中(表单控件在实际的业务场景中是比较常见的，单选，多选，下拉选择，输入框等，用这些控件可以完成数据的录入、校验以及提交等。vue给我们提供了v-model指令用于在表单类元素上双向绑定数据。 )</p>
]]></summary>
        <content type="html"><![CDATA[<p>v-model指令，可以实现表单元素和Model中数据的双向数据绑定，但v-model只能运用到表单元素中(表单控件在实际的业务场景中是比较常见的，单选，多选，下拉选择，输入框等，用这些控件可以完成数据的录入、校验以及提交等。vue给我们提供了v-model指令用于在表单类元素上双向绑定数据。 )</p>
<!-- more -->
<p>代码示例</p>
<pre><code>&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;style&gt;
        input{
            width: 100%;
            padding: 15px 10px;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id=&quot;app&quot;&gt;
      &lt;h4&gt;{{msg}}&lt;/h4&gt;
      &lt;!--v-bind:(:)只能实现数据的单向绑定，从M 绑定到V--&gt;
      &lt;input type=&quot;text&quot; name=&quot;name&quot; :value=&quot;msg&quot;&gt;
      &lt;!--v-model指令，可以实现表单元素和Model中数据的双向数据绑定--&gt;
      &lt;!--v-model只能运用到表单元素中--&gt;
      &lt;input type=&quot;text&quot; name=&quot;name&quot; v-model=&quot;msg&quot;&gt;
    &lt;/div&gt;
    &lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;
    &lt;script&gt;
        var vm = new Vue({
            el: '#app',
            data:{
                msg: '这个Messge里面内容'
            },
            methods:{
             
            }
        })
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p><img src="https://ihopefulchina.github.io/post-images/1567493670785.png" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue学习(五): 事件修饰符]]></title>
        <id>https://ihopefulchina.github.io/post/vue-xue-xi-wu-shi-jian-xiu-shi-fu</id>
        <link href="https://ihopefulchina.github.io/post/vue-xue-xi-wu-shi-jian-xiu-shi-fu">
        </link>
        <updated>2019-09-03T05:43:33.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="事件修饰符">事件修饰符:</h3>
<ol>
<li>.stop 阻止冒泡</li>
<li>.prevent 阻止默认事件</li>
<li>.capture 添加事件侦听器时使用事件捕获模式</li>
<li>.self 只当事件在该元素(比如不是子元素)触发时触发回调</li>
<li>.once 只触发一次</li>
</ol>
]]></summary>
        <content type="html"><![CDATA[<h3 id="事件修饰符">事件修饰符:</h3>
<ol>
<li>.stop 阻止冒泡</li>
<li>.prevent 阻止默认事件</li>
<li>.capture 添加事件侦听器时使用事件捕获模式</li>
<li>.self 只当事件在该元素(比如不是子元素)触发时触发回调</li>
<li>.once 只触发一次</li>
</ol>
<!-- more -->
<h4 id="stop-阻止冒泡">.stop 阻止冒泡</h4>
<pre><code>&lt;!--使用.stop 阻止冒泡--&gt;
        &lt;div class=&quot;inner&quot; @click=&quot;divHandler&quot;&gt;
            &lt;input type=&quot;button&quot; value=&quot;点击&quot; @click.stop=&quot;btnHandler&quot;&gt;
        &lt;/div&gt;
</code></pre>
<h4 id="prevent-阻止默认事件">.prevent 阻止默认事件</h4>
<pre><code>&lt;!--使用.prevet 阻止默认事件--&gt;
        &lt;a href=&quot;http://baidu.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; @click.prevent=&quot;linkclick&quot;&gt;点击百度&lt;/a&gt;
</code></pre>
<h4 id="capture-添加事件侦听器时使用事件捕获模式">.capture 添加事件侦听器时使用事件捕获模式</h4>
<pre><code>&lt;!--使用.capture 实现捕获触发事件的机制(从外到里捕获事件)--&gt;
        &lt;div class=&quot;inner&quot; @click.capture=&quot;divHandler&quot;&gt;
            &lt;input type=&quot;button&quot; value=&quot;点击&quot; @click.stop=&quot;btnHandler&quot;&gt;
        &lt;/div&gt;
</code></pre>
<h4 id="self-只当事件在该元素比如不是子元素触发时触发回调">self 只当事件在该元素(比如不是子元素)触发时触发回调</h4>
<pre><code>&lt;!--使用.self 实现只有点击当期元素，才会触发事件函数--&gt;
        &lt;div class=&quot;inner&quot; @click.self=&quot;divHandler&quot;&gt;
            &lt;input type=&quot;button&quot; value=&quot;点击&quot; @click.stop=&quot;btnHandler&quot;&gt;
        &lt;/div&gt;
</code></pre>
<h4 id="once-只触发一次">.once 只触发一次</h4>
<pre><code>&lt;!--使用.once 事件只触发一次处理函数 .prevent.once 顺序无所谓--&gt;
        &lt;a href=&quot;http://baidu.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; @click.prevent.once=&quot;linkclick&quot;&gt;点击百度&lt;/a&gt;
</code></pre>
<h3 id="使用stop-与self的区别">使用.stop 与.self的区别</h3>
<p>.self只会阻止自己身上的冒泡的行为触发，不会阻止别人的触发</p>
<pre><code>&lt;!--使用.stop 阻止冒泡--&gt;
        &lt;div class=&quot;outer&quot; @click=&quot;div2Handler&quot;&gt;
            &lt;div class=&quot;inner&quot; @click=&quot;divHandler&quot;&gt;
                &lt;input type=&quot;button&quot; value=&quot;点击&quot; @click.stop=&quot;btnHandler&quot;&gt;
            &lt;/div&gt;
        &lt;/div&gt;
         &lt;!--使用 .self 阻止冒泡--&gt;
        &lt;div class=&quot;outer&quot; @click=&quot;div2Handler&quot;&gt;
            &lt;div class=&quot;inner&quot; @click.self=&quot;divHandler&quot;&gt;
                &lt;input type=&quot;button&quot; value=&quot;点击&quot; @click=&quot;btnHandler&quot;&gt;
            &lt;/div&gt;
        &lt;/div&gt;
</code></pre>
<p>完成代码示例</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;
    &lt;style&gt;
        .inner{
            height: 150px;
            background-color: darkcyan;
            margin: 15px 0
        }
        .outer{
            padding: 40px;
            background-color: red;
            margin: 15px 0
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id=&quot;app&quot;&gt;
        &lt;!--使用.stop 阻止冒泡--&gt;
        &lt;div class=&quot;inner&quot; @click=&quot;divHandler&quot;&gt;
            &lt;input type=&quot;button&quot; value=&quot;点击&quot; @click.stop=&quot;btnHandler&quot;&gt;
        &lt;/div&gt;

        &lt;!--使用.prevet 阻止默认事件--&gt;
        &lt;a href=&quot;http://baidu.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; @click.prevent=&quot;linkclick&quot;&gt;点击百度&lt;/a&gt;

        &lt;!--使用.capture 实现捕获触发事件的机制(从外到里捕获事件)--&gt;
        &lt;div class=&quot;inner&quot; @click.capture=&quot;divHandler&quot;&gt;
            &lt;input type=&quot;button&quot; value=&quot;点击&quot; @click.stop=&quot;btnHandler&quot;&gt;
        &lt;/div&gt;

        &lt;!--使用.self 实现只有点击当期元素，才会触发事件函数--&gt;
        &lt;div class=&quot;inner&quot; @click.self=&quot;divHandler&quot;&gt;
            &lt;input type=&quot;button&quot; value=&quot;点击&quot; @click.stop=&quot;btnHandler&quot;&gt;
        &lt;/div&gt;

        &lt;!--使用.once 事件只触发一次处理函数 .prevent.once 顺序无所谓--&gt;
        &lt;a href=&quot;http://baidu.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; @click.prevent.once=&quot;linkclick&quot;&gt;点击百度&lt;/a&gt;

        &lt;!--使用.stop 与.self的区别
        .self只会阻止自己身上的冒泡的行为触发，不会阻止别人的触发
        --&gt;
        &lt;!--使用.stop 阻止冒泡--&gt;
        &lt;div class=&quot;outer&quot; @click=&quot;div2Handler&quot;&gt;
            &lt;div class=&quot;inner&quot; @click=&quot;divHandler&quot;&gt;
                &lt;input type=&quot;button&quot; value=&quot;点击&quot; @click.stop=&quot;btnHandler&quot;&gt;
            &lt;/div&gt;
        &lt;/div&gt;
         &lt;!--使用 .self 阻止冒泡--&gt;
        &lt;div class=&quot;outer&quot; @click=&quot;div2Handler&quot;&gt;
            &lt;div class=&quot;inner&quot; @click.self=&quot;divHandler&quot;&gt;
                &lt;input type=&quot;button&quot; value=&quot;点击&quot; @click=&quot;btnHandler&quot;&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;script&gt;
    var vm= new Vue({
        el: '#app',
        data:{

        },
        methods:{
            divHandler(){
                console.log('触发inner div的点击事件')
            },
            btnHandler(){
                console.log('触发btn 的点击事件')
            },
            linkclick()
            {
                console.log('触发link的点击事件')
            },
            div2Handler(){
                console.log('触发outer 的点击事件')
            }
        }
    });
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue学习(四): 跑马灯效果案例 ]]></title>
        <id>https://ihopefulchina.github.io/post/vue-xue-xi-si-pao-ma-deng-xiao-guo-an-li</id>
        <link href="https://ihopefulchina.github.io/post/vue-xue-xi-si-pao-ma-deng-xiao-guo-an-li">
        </link>
        <updated>2019-09-03T04:54:11.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="开启跑马灯效果分析思路">开启跑马灯效果分析思路</h3>
<ol>
<li>给开启按钮绑定一个点击事件 v-on @</li>
<li>在按钮的处理事件函数，写相关的业务逻辑代码:拿到msg字符串，然后调用字符串的substring来进行字符串的截取，把第一个字符串截取出到最后一个</li>
<li>为了实现点击按钮，自动截取功能，需要把2步骤中的代码，放到一个计时器里面。</li>
</ol>
]]></summary>
        <content type="html"><![CDATA[<h3 id="开启跑马灯效果分析思路">开启跑马灯效果分析思路</h3>
<ol>
<li>给开启按钮绑定一个点击事件 v-on @</li>
<li>在按钮的处理事件函数，写相关的业务逻辑代码:拿到msg字符串，然后调用字符串的substring来进行字符串的截取，把第一个字符串截取出到最后一个</li>
<li>为了实现点击按钮，自动截取功能，需要把2步骤中的代码，放到一个计时器里面。</li>
</ol>
<!-- more -->
<p>代码示例:</p>
<pre><code>&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id=&quot;app&quot;&gt;
        &lt;h4&gt;{{msg}}&lt;/h4&gt;
        &lt;input type=&quot;button&quot; value=&quot;开启&quot; @click=&quot;on&quot;&gt;
        &lt;input type=&quot;button&quot; value=&quot;关闭&quot;&gt;
    &lt;/div&gt;
    &lt;script&gt;
    var vm =new Vue({
        //注意在vm实例中，如果获取data数据/methods中的方法，都需要通过this.数据属性名和方法名，这里的this.表示new vue的实例
        el: '#app',
        data:{
            msg: '跑马灯效果开启效果！！！'
        },
        methods:{
            on(){
                setInterval(()=&gt;{
                    //获取第一个字符
                    var start = this.msg.substring(0,1)
                    //获取后面的所有字符
                    var end = this.msg.substring(1)
                    //重新拼接(马灯效果开启效果！！！跑),并赋值给 this.msg
                    this.msg = end + start
                }, 400)
               
            }
        }
    
    })
    //步骤分析
    //1.给开启按钮绑定一个点击事件 v-on @
    //2.在按钮的处理事件函数，写相关的业务逻辑代码:拿到msg字符串，然后调用字符串的substring来进行字符串的截取，把第一个字符串截取出到最后一个
    //3.为了实现点击按钮，自动截取功能，需要把2步骤中的代码，放到一个计时器里面。
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p><strong>注意:</strong></p>
<ol>
<li>在vm实例中，如果获取data数据/methods中的方法，都需要通过this.数据属性名和方法名，这里的this.表示new vue的实例</li>
</ol>
<pre><code>console.log(this.msg) 
</code></pre>
<ol start="2">
<li>VM实例会监听自己身上data中所有数据的变化，如果数据一发生变化，就会自动把最新的数据，从data上同步到页面中去(好处:减少DOM操作)</li>
</ol>
<p>完整代码示例</p>
<pre><code>&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id=&quot;app&quot;&gt;
        &lt;h4&gt;{{msg}}&lt;/h4&gt;
        &lt;input type=&quot;button&quot; value=&quot;开启&quot; @click=&quot;on&quot;&gt;
        &lt;input type=&quot;button&quot; value=&quot;关闭&quot; @click=&quot;stop&quot;&gt;
    &lt;/div&gt;
    &lt;script&gt;
    var vm =new Vue({
        //注意在vm实例中，如果获取data数据/methods中的方法，都需要通过this.数据属性名和方法名，这里的this.表示new vue的实例
        el: '#app',
        data:{
            msg: '跑马灯效果开启效果！！！',
            intervalId: null //在data上定义定时器id
        },
        methods:{
            on(){
                if(this.intervalId != null){
                    return
                }
                this.intervalId = setInterval(()=&gt;{
                
                    //获取第一个字符
                    var start = this.msg.substring(0,1)
                    //获取后面的所有字符
                    var end = this.msg.substring(1)
                    //重新拼接(马灯效果开启效果！！！跑),并赋值给 this.msg
                    this.msg = end + start
                }, 400)
               
            },
            stop(){//停止定时器
                clearInterval(this.intervalId)
                //每当清除定时器之后，需要把intervalId定义为null
                this.intervalId = null
            }
        }
    
    })
    //步骤分析
    //1.给开启按钮绑定一个点击事件 v-on @
    //2.在按钮的处理事件函数，写相关的业务逻辑代码:拿到msg字符串，然后调用字符串的substring来进行字符串的截取，把第一个字符串截取出到最后一个
    //3.为了实现点击按钮，自动截取功能，需要把2步骤中的代码，放到一个计时器里面。
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue学习(三): v-bind、v-on指令的学习]]></title>
        <id>https://ihopefulchina.github.io/post/vue-xue-xi-san-v-bind-zhi-ling-de-xue-xi</id>
        <link href="https://ihopefulchina.github.io/post/vue-xue-xi-san-v-bind-zhi-ling-de-xue-xi">
        </link>
        <updated>2019-09-03T03:45:37.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="v-bind是vue中提供的绑定属性的指令">v-bind是Vue中提供的绑定属性的指令。</h3>
<p>v-bind 指令被用来响应地更新 HTML 属性，其实它是支持一个单一 JavaScript 表达式 （v-for 除外）。<br>
完整语法：<code>&lt;span v-bind:class=&quot;classProperty&quot;&gt;&lt;/span &gt;</code>，解释：v-bind 是指令，: 后面的 class 是参数，classProperty 则在官方文档中被称为“预期值”。<br>
缩写语法：<code>&lt;span :class=&quot;classProperty&quot;&gt;&lt;/span &gt;</code>，解释：: 后面的 class 是参数，classProperty 则在官方文档中被称为“预期值”。</p>
]]></summary>
        <content type="html"><![CDATA[<h3 id="v-bind是vue中提供的绑定属性的指令">v-bind是Vue中提供的绑定属性的指令。</h3>
<p>v-bind 指令被用来响应地更新 HTML 属性，其实它是支持一个单一 JavaScript 表达式 （v-for 除外）。<br>
完整语法：<code>&lt;span v-bind:class=&quot;classProperty&quot;&gt;&lt;/span &gt;</code>，解释：v-bind 是指令，: 后面的 class 是参数，classProperty 则在官方文档中被称为“预期值”。<br>
缩写语法：<code>&lt;span :class=&quot;classProperty&quot;&gt;&lt;/span &gt;</code>，解释：: 后面的 class 是参数，classProperty 则在官方文档中被称为“预期值”。</p>
<!-- more -->
<p>格式:<br>
<code>&lt;input type=&quot;button&quot; value=&quot;按钮&quot; v-bind:title=&quot;mytitle&quot;&gt;</code></p>
<pre><code>var vm = new Vue({
            el: '#app',
            data:{
                mytitle: '定义的title'
            }
        })
</code></pre>
<h3 id="v-bind加变量的表达式">v-bind加变量的表达式</h3>
<pre><code>&lt;input type=&quot;button&quot; value=&quot;按钮&quot; v-bind:title=&quot;mytitle + ' 123'&quot;&gt;
</code></pre>
<h4 id="v-bind简写">v-bind简写</h4>
<pre><code>&lt;input type=&quot;button&quot; value=&quot;按钮&quot; :title=&quot;mytitle + ' 123'&quot;&gt;
</code></pre>
<p>注意:</p>
<ol>
<li><code>v-bind:</code>指令可以简写为<code>:要绑定的属性</code>。</li>
<li>v-bind中可以合法写JS表达式。</li>
</ol>
<h3 id="v-on-事件绑定机制">v-on 事件绑定机制</h3>
<pre><code>&lt;input type=&quot;button&quot; value=&quot;按钮&quot; v-on:click=&quot;show&quot;&gt;
 methods:{//这个methods属性定义了当前vue实例所有可用的方法
                show: function(){
                    alert('yes')
                }
            }
</code></pre>
<h4 id="v-on简写">v-on简写</h4>
<pre><code>&lt;input type=&quot;button&quot; value=&quot;按钮&quot; @click=&quot;show&quot;&gt;
 methods:{//这个methods属性定义了当前vue实例所有可用的方法
                show(){
                    alert('yes')
                }
            }
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue学习(二): v-cloak、v-text、v-html]]></title>
        <id>https://ihopefulchina.github.io/post/vue-xue-xi-er-v-cloakv-textv-html</id>
        <link href="https://ihopefulchina.github.io/post/vue-xue-xi-er-v-cloakv-textv-html">
        </link>
        <updated>2019-09-03T03:11:58.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="使用-v-cloak插值表达式能够解决插值表达式闪烁问题">使用 v-cloak(插值表达式)能够解决插值表达式闪烁问题</h3>
<p>可以使用 v-cloak 指令设置样式，这些样式会在 Vue 实例编译结束时，从绑定的 HTML 元素上被移除。<br>
当网络较慢，网页还在加载 Vue.js ，而导致 Vue 来不及渲染，这时页面就会显示出 Vue 源代码。我们可以使用 v-cloak 指令来解决这一问题。</p>
]]></summary>
        <content type="html"><![CDATA[<h3 id="使用-v-cloak插值表达式能够解决插值表达式闪烁问题">使用 v-cloak(插值表达式)能够解决插值表达式闪烁问题</h3>
<p>可以使用 v-cloak 指令设置样式，这些样式会在 Vue 实例编译结束时，从绑定的 HTML 元素上被移除。<br>
当网络较慢，网页还在加载 Vue.js ，而导致 Vue 来不及渲染，这时页面就会显示出 Vue 源代码。我们可以使用 v-cloak 指令来解决这一问题。</p>
<!-- more -->
<pre><code>&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;style&gt;
    [v-cloak]{
        display: none;
    }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id=&quot;app&quot;&gt;
        &lt;!--使用 v-cloak能够解决插值表达式闪烁问题--&gt;
        &lt;p v-cloak&gt;{{msg}}&lt;/p&gt;
    &lt;/div&gt;
    &lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;
    &lt;script&gt;
        var vm = new Vue({
            el: '#app',
            data:{
                msg: '123'
            }
        })
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="v-text的使用与v-cloak的区别">v-text的使用与v-cloak的区别</h3>
<pre><code>&lt;h4 v-text=&quot;msg&quot;&gt;&lt;/h4&gt;
</code></pre>
<p><strong>v-text与v-cloak区别</strong></p>
<ol>
<li>默认v-text是没有闪烁问题，但v-cloak有闪烁，需要写一个<code>[v-cloak]{display:none}</code></li>
<li>v-cloak可以前后放任意内容，v-text只能放v-text的值（会覆盖元素原本的内容）</li>
</ol>
<h3 id="v-html-能够输出html标签">v-html 能够输出html标签</h3>
<pre><code>&lt;div v-html=&quot;msg2&quot;&gt;&lt;/div&gt;
var vm = new Vue({
            el: '#app',
            data:{
                msg2: '&lt;h1&gt;这是H1标签&lt;/h1&gt;'
            }
        })
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue学习(一): Vue的MVVM]]></title>
        <id>https://ihopefulchina.github.io/post/vue-xue-xi-yi-vue-de-mvvm</id>
        <link href="https://ihopefulchina.github.io/post/vue-xue-xi-yi-vue-de-mvvm">
        </link>
        <updated>2019-09-03T02:25:33.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="1node后端中的mvc与前端中的mvvm之间的区别">1.Node(后端)中的MVC与前端中的MVVM之间的区别</h3>
<ul>
<li>MVC是后端分层开发概念。</li>
<li>MVVM是前端视图层的概念，主要关注于视图分层，也就是说:MVVM把前端的分为了三部分,Model, VM 和 ViewModel</li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<h3 id="1node后端中的mvc与前端中的mvvm之间的区别">1.Node(后端)中的MVC与前端中的MVVM之间的区别</h3>
<ul>
<li>MVC是后端分层开发概念。</li>
<li>MVVM是前端视图层的概念，主要关注于视图分层，也就是说:MVVM把前端的分为了三部分,Model, VM 和 ViewModel</li>
</ul>
<!-- more -->
<h3 id="2vue处理逻辑过程">2.Vue处理逻辑过程</h3>
<p><img src="https://ihopefulchina.github.io/post-images/1567477853059.png" alt=""></p>
<h3 id="3vue基本代码和mvvm之间对应关系">3.Vue基本代码和MVVM之间对应关系</h3>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;
	&lt;title&gt;&lt;/title&gt;
    &lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;!--将来 new这个Vue实例控制这个元素所有内容 
    Vue实例所控制的这个元素区域，就是我们的 V --&gt;
&lt;div id=&quot;app&quot;&gt;
    &lt;p&gt;{{ msg }}&lt;/p&gt;

&lt;/div&gt;
&lt;script&gt;
//创建实例
//当我们导入包之后，在浏览器内存中，就多了一个Vue构造函数
//我们New出来的这个vm对象，就是我们MVVM中的VM调度者
 var vm = new Vue({
     el: '#app', //表示当前我们New这个Vue实例，要控制页面哪个区域
     data:{
         //data 属性中，存放的是el中需要的数据
         msg: 'Vue学习' //通过Vue提供的指令，很方便把数据渲染到页面上，程序员不在手动操作DOM元素[前端框架Vue之类的框架，不提倡我们手动操作DOM 元素]
     }
     //这里的data就是MVVM的M，专门保存每个页面的数据的
})
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;

</code></pre>
]]></content>
    </entry>
</feed>