<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ihopefulchina.github.io</id>
    <title>Ihopeful Blog</title>
    <updated>2021-02-07T09:15:31.685Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ihopefulchina.github.io"/>
    <link rel="self" href="https://ihopefulchina.github.io/atom.xml"/>
    <subtitle>Sweat is the lubricant of success.</subtitle>
    <logo>https://ihopefulchina.github.io/images/avatar.png</logo>
    <icon>https://ihopefulchina.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Ihopeful Blog</rights>
    <entry>
        <title type="html"><![CDATA[ React Native学习笔记· 3.交互]]></title>
        <id>https://ihopefulchina.github.io/react-native-xue-xi-bi-ji-3jiao-hu/</id>
        <link href="https://ihopefulchina.github.io/react-native-xue-xi-bi-ji-3jiao-hu/">
        </link>
        <updated>2021-02-07T08:39:57.000Z</updated>
        <summary type="html"><![CDATA[<p>这部分文档，我看到有点云里雾里，后续上手需要翻阅一下。</p>
]]></summary>
        <content type="html"><![CDATA[<p>这部分文档，我看到有点云里雾里，后续上手需要翻阅一下。</p>
<!-- more -->
<ol>
<li>处理触摸事件。<code>&lt;Button onPress={onPressButton}title=&quot;Press Me&quot;/&gt;</code> 长按是采用<code>onLongPress</code> 。</li>
<li>React Navigation 这个 有点像Taro的Navigator, 后续翻阅文档<a href="https://reactnavigation.org/docs/getting-started">React Navigation</a>。</li>
<li>动画 ，
<ul>
<li><code>Animated</code> 使用demo</li>
</ul>
</li>
</ol>
<pre><code>    import React, { useRef, useEffect } from 'react';
    import { Animated, Text, View } from 'react-native';
    const FadeInView = (props) =&gt; {
    const fadeAnim = useRef(new Animated.Value(0)).current  // 透明度初始值设为0

    React.useEffect(() =&gt; {
        Animated.timing(                  // 随时间变化而执行动画
        fadeAnim,                       // 动画中的变量值
        {
            toValue: 1,                   // 透明度最终变为1，即完全不透明
            duration: 10000,              // 让动画持续一段时间
        }
        ).start();                        // 开始执行动画
    }, [fadeAnim])

    return (
        &lt;Animated.View                 // 使用专门的可动画化的View组件
        style={{
            ...props.style,
            opacity: fadeAnim,         // 将透明度绑定到动画变量值
        }}
        &gt;
        {props.children}
        &lt;/Animated.View&gt;
    );
    }

    // 然后你就可以在组件中像使用`View`那样去使用`FadeInView`了
    export default () =&gt; {
    return (
        &lt;View style={{flex: 1, alignItems: 'center', justifyContent: 'center'}}&gt;
        &lt;FadeInView style={{width: 250, height: 50, backgroundColor: 'powderblue'}}&gt;
            &lt;Text style={{fontSize: 28, textAlign: 'center', margin: 10}}&gt;Fading in&lt;/Text&gt;
        &lt;/FadeInView&gt;
        &lt;/View&gt;
    )
    }
</code></pre>
<ol start="4">
<li>响应者的生命周期。<br>
View.props.onStartShouldSetResponder: (evt) =&gt; true, - 在用户开始触摸的时候（手指刚刚接触屏幕的瞬间），是否愿意成为响应者？<br>
View.props.onMoveShouldSetResponder: (evt) =&gt; true, - 如果 View 不是响应者，那么在每一个触摸点开始移动（没有停下也没有离开屏幕）时再询问一次：是否愿意响应触摸交互呢？<br>
如果 View 返回 true，并开始尝试成为响应者，那么会触发下列事件之一:<br>
View.props.onResponderGrant: (evt) =&gt; {} - View 现在要开始响应触摸事件了。这也是需要做高亮的时候，使用户知道他到底点到了哪里。<br>
View.props.onResponderReject: (evt) =&gt; {} - 响应者现在“另有其人”而且暂时不会“放权”，请另作安排。<br>
如果 View 已经开始响应触摸事件了，那么下列这些处理函数会被一一调用：<br>
View.props.onResponderMove: (evt) =&gt; {} - 用户正在屏幕上移动手指时（没有停下也没有离开屏幕）。<br>
View.props.onResponderRelease: (evt) =&gt; {} - 触摸操作结束时触发，比如&quot;touchUp&quot;（手指抬起离开屏幕）。<br>
View.props.onResponderTerminationRequest: (evt) =&gt; true - 有其他组件请求接替响应者，当前的 View 是否“放权”？返回 true 的话则释放响应者权力。<br>
View.props.onResponderTerminate: (evt) =&gt; {} - 响应者权力已经交出。这可能是由于其他 View 通过onResponderTerminationRequest请求的，也可能是由操作系统强制夺权（比如 iOS 上的控制中心或是通知中心）。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[React Native学习笔记· 2. 环境搭建]]></title>
        <id>https://ihopefulchina.github.io/react-native-xue-xi-bi-ji-2-huan-jing-da-jian/</id>
        <link href="https://ihopefulchina.github.io/react-native-xue-xi-bi-ji-2-huan-jing-da-jian/">
        </link>
        <updated>2021-02-07T07:28:35.000Z</updated>
        <summary type="html"><![CDATA[<p>浏览了一下官网的安装流程，发现需要安装的有点多，所以感觉有必要纪录一下。<br>
我选择平台是ios(swift)+mac：<br>
把 React Native 组件集成到 iOS 应用中有如下几个主要步骤：</p>
]]></summary>
        <content type="html"><![CDATA[<p>浏览了一下官网的安装流程，发现需要安装的有点多，所以感觉有必要纪录一下。<br>
我选择平台是ios(swift)+mac：<br>
把 React Native 组件集成到 iOS 应用中有如下几个主要步骤：</p>
<!-- more -->
<h3 id="搭建开发环境">搭建开发环境</h3>
<p>必须安装的依赖有：Node、Watchman、Xcode 和 CocoaPods。</p>
<p>首先需要安装<a href="https://apps.apple.com/cn/app/xcode/id497799835?mt=12">Xcode</a>和<a href="https://brew.sh/">Homebrew</a></p>
<pre><code># 安装node
brew install node

# 安装watchman
brew install watchman

# 使用nrm工具切换淘宝源
npx nrm use taobao

# 安装Yarn
npm install -g yarn

# 安装cocoapods
brew install cocoapods
</code></pre>
<p>详情地址: <a href="https://www.react-native.cn/docs/environment-setup">https://www.react-native.cn/docs/environment-setup</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[React Native学习笔记· 1. 官网入门基础]]></title>
        <id>https://ihopefulchina.github.io/react-native-xue-xi-bi-ji-1-guan-wang-ru-men-ji-chu/</id>
        <link href="https://ihopefulchina.github.io/react-native-xue-xi-bi-ji-1-guan-wang-ru-men-ji-chu/">
        </link>
        <updated>2021-02-07T05:54:53.000Z</updated>
        <summary type="html"><![CDATA[<p>看了一下，部分内容有点像Taro(Taro借鉴react和rn), 官网推荐使用函数和class这2种方式写，考虑到react 开发团队转向hooks，所以我将都用函数式写。</p>
]]></summary>
        <content type="html"><![CDATA[<p>看了一下，部分内容有点像Taro(Taro借鉴react和rn), 官网推荐使用函数和class这2种方式写，考虑到react 开发团队转向hooks，所以我将都用函数式写。</p>
<!-- more -->
<p>不过也有几点不太一样：</p>
<ol>
<li>textInpnut等同于的Taro的input,onChangeText属性等同于onInput</li>
</ol>
<pre><code>&lt;TextInput
    style={{height: 40}}
    placeholder=&quot;Type here to translate!&quot;
    onChangeText={text =&gt; setText(text)}
    defaultValue={text}
/&gt;
</code></pre>
<ol start="2">
<li>有一个长列表概念，FlatList，需要2个属性，data和renderItem，字面意思，data是列表的数据源，而renderItem则从数据源中逐个解析数据，然后返回一个设定好格式的组件来渲染。不过感觉缺少双击回到顶部和下拉刷新等等功能，后续我尝试封装一下。</li>
</ol>
<pre><code>   &lt;FlatList
        data={[]}
        renderItem={({item}) =&gt; &lt;Text&gt;{item}&lt;/Text&gt;}
      /&gt;
</code></pre>
<ol start="3">
<li>
<p>Platform模块。提供了一个检测当前运行平台的模块。<br>
-  <code>Platform.OS</code>  ， 在 iOS 上会返回ios，而在 Android 设备或模拟器上则会返回android。<br>
-   <code>Platform.select()</code>  , 它可以以 Platform.OS 为 key，从传入的对象中返回对应平台的值。  <code>Platform.select({os: () =&gt; require('ComponentIOS'), android: () =&gt; require('ComponentAndroid')})</code><br>
-   <code>Platform.Version</code> 在安卓表示 api level， ios表示表示当前系统版本</p>
</li>
<li>
<p>特定平台扩展名。有点像Taro 在不同平台使用特定文件。React Native 会检测某个文件是否具有.ios.或是.android.的扩展名，然后根据当前运行的平台自动加载正确对应的文件。</p>
</li>
<li>
<p><code>Button</code> 点击事件是<code>onPress</code>。</p>
</li>
<li>
<p>定义样式：<code>const styles = StyleSheet.create({})</code>。</p>
</li>
<li>
<p>定义宽高3种方式：</p>
<ol>
<li><code>&lt;View style={{width: 50, height: 50}} /&gt;</code> 无单位指定宽高。</li>
<li><code>&lt;View style={{flex: 1}} /&gt;</code> felx 弹性布局宽高。</li>
<li><code>&lt;View style={{width: '66%', height: '35%', }} /&gt;</code> 百分比方式</li>
</ol>
</li>
<li>
<p>布局采用flex的方式 <code>flexBox</code>。</p>
</li>
<li>
<p><a href="https://www.react-native.cn/docs/components-and-apis">更多核心组件和api</a>。</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[React hooks todo]]></title>
        <id>https://ihopefulchina.github.io/react-hooks-todo/</id>
        <link href="https://ihopefulchina.github.io/react-hooks-todo/">
        </link>
        <updated>2021-02-07T02:30:08.000Z</updated>
        <summary type="html"><![CDATA[<p>地址: <a href="https://github.com/ihopefulChina/react-hooks-todo">todoList</a></p>
<p>个人练手项目 React hooks +  ts</p>
]]></summary>
        <content type="html"><![CDATA[<p>地址: <a href="https://github.com/ihopefulChina/react-hooks-todo">todoList</a></p>
<p>个人练手项目 React hooks +  ts</p>
<!-- more -->
<h2 id="安装">安装</h2>
<pre><code class="language-sh">yarn
</code></pre>
<h2 id="调试">调试</h2>
<pre><code class="language-sh">yarn start
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数据增减计算 for Taro]]></title>
        <id>https://ihopefulchina.github.io/shu-ju-zeng-jian-ji-suan-for-taro/</id>
        <link href="https://ihopefulchina.github.io/shu-ju-zeng-jian-ji-suan-for-taro/">
        </link>
        <updated>2021-02-07T02:23:13.000Z</updated>
        <summary type="html"><![CDATA[<p>前端计算增减数据. Taro 2.x + TS</p>
<p>支持多端迁移，新建数据增减计算</p>
]]></summary>
        <content type="html"><![CDATA[<p>前端计算增减数据. Taro 2.x + TS</p>
<p>支持多端迁移，新建数据增减计算</p>
<!-- more -->
<p>地址:<a href="https://github.com/ihopefulChina/add-data-calculation-for-Taro">数据增减计算</a></p>
<h2 id="效果图">效果图</h2>
<figure data-type="image" tabindex="1"><img src="https://ihopefulchina.github.io/post-images/1612664674204.png" alt="demo" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Taro 日历 多选]]></title>
        <id>https://ihopefulchina.github.io/taro-ri-li-duo-xuan/</id>
        <link href="https://ihopefulchina.github.io/taro-ri-li-duo-xuan/">
        </link>
        <updated>2021-02-07T02:00:38.000Z</updated>
        <summary type="html"><![CDATA[<p>我翻阅了很多 Taro 相关插件和方法，都没有找到一个支持多选（不连续选择日期）的插件，所以自己写了一个组件，目前还很简单，后期会加上 Props 封装。</p>
]]></summary>
        <content type="html"><![CDATA[<p>我翻阅了很多 Taro 相关插件和方法，都没有找到一个支持多选（不连续选择日期）的插件，所以自己写了一个组件，目前还很简单，后期会加上 Props 封装。</p>
<!-- more -->
<p>地址:  <a href="https://github.com/ihopefulChinaTaro-Calendar-Multiple-choice-checkbox">Taro 日历 多选</a></p>
<p>Taro 2.x + TS</p>
<p>目前支持的功能:</p>
<ol>
<li>多选，不连续多选日期</li>
<li>支持切换月份</li>
<li>保留上次选择，多选</li>
</ol>
<p>后期会封装这个组件，加上这些功能</p>
<ol>
<li>日历滑动</li>
<li>。。。</li>
</ol>
<p>样式示例</p>
<figure data-type="image" tabindex="1"><img src="https://ihopefulchina.github.io/post-images/1612664208415.png" alt="demo img" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue: 移动端 h5 动画 Web]]></title>
        <id>https://ihopefulchina.github.io/vue-shi-zhan-er-yi-dong-duan-h5-dong-hua-web/</id>
        <link href="https://ihopefulchina.github.io/vue-shi-zhan-er-yi-dong-duan-h5-dong-hua-web/">
        </link>
        <updated>2020-05-11T06:10:27.000Z</updated>
        <summary type="html"><![CDATA[<p>基于vue开发，vue-cli脚手架搭建，在线演示地址: http://h5.hpfgmy.site/</p>
<p>目前有部分音频bug，推测是缓存方面的原因，后续有空解决这个bug。</p>
<p>源码地址：https://github.com/ihopefulChina/Mobile-H5-web-for-vue</p>
]]></summary>
        <content type="html"><![CDATA[<p>基于vue开发，vue-cli脚手架搭建，在线演示地址: http://h5.hpfgmy.site/</p>
<p>目前有部分音频bug，推测是缓存方面的原因，后续有空解决这个bug。</p>
<p>源码地址：https://github.com/ihopefulChina/Mobile-H5-web-for-vue</p>
<!-- more -->
<figure data-type="image" tabindex="1"><img src="https://ihopefulchina.github.io/post-images/1589177491662.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue: Movie App]]></title>
        <id>https://ihopefulchina.github.io/vue-shi-zhan-yi-movie-app/</id>
        <link href="https://ihopefulchina.github.io/vue-shi-zhan-yi-movie-app/">
        </link>
        <updated>2020-04-28T06:58:01.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="基于vue开发的电影票信息app">基于Vue开发的电影票信息app。</h3>
<p>实际功能基本都已实现，目前暂无登陆功能，需要后台登录接口。<br>
数据接口来自<a href="http://39.97.33.178">39.97.33.178</a></p>
]]></summary>
        <content type="html"><![CDATA[<h3 id="基于vue开发的电影票信息app">基于Vue开发的电影票信息app。</h3>
<p>实际功能基本都已实现，目前暂无登陆功能，需要后台登录接口。<br>
数据接口来自<a href="http://39.97.33.178">39.97.33.178</a></p>
<!-- more -->
<h4 id="功能介绍">功能介绍：</h4>
<ul>
<li>提供电影信息，电影院，和登陆功能。</li>
<li>提供搜索，正在热映，即将上映。</li>
<li>根据定位和手动定位提供所在城市的电影，电影院等功能。</li>
</ul>
<h4 id="技术介绍">技术介绍：</h4>
<p>基于vue2.x版本开发，采用cli脚手架+axios搭建。</p>
<h4 id="项目演示地址">项目演示地址：</h4>
<p>👉 <a href="https://github.com/ihopefulChina/vue-movie-app">Github: Vue Movie App</a></p>
<figure data-type="image" tabindex="1"><img src="https://ihopefulchina.github.io/post-images/1588057378940.png" alt="电影票" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ Vue学习(十三): 品牌管理列表案例Demo学习]]></title>
        <id>https://ihopefulchina.github.io/vue-xue-xi-shi-san-pin-pai-guan-li-lie-biao-an-li-demo-xue-xi/</id>
        <link href="https://ihopefulchina.github.io/vue-xue-xi-shi-san-pin-pai-guan-li-lie-biao-an-li-demo-xue-xi/">
        </link>
        <updated>2019-09-04T06:36:18.000Z</updated>
        <summary type="html"><![CDATA[<p><strong>添加:</strong></p>
<pre><code>//获取id和name，直接从data上面获取
 // 组织一个对象
 //把这个对象，调用数组的相关方法，添加到当前data上的list中
 //在Vue中，已经实现数据的双向绑定，每当我们修改了data中的数据，vue会默认监听数据改动，自动把最新的数据应用到页面上
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<p><strong>添加:</strong></p>
<pre><code>//获取id和name，直接从data上面获取
 // 组织一个对象
 //把这个对象，调用数组的相关方法，添加到当前data上的list中
 //在Vue中，已经实现数据的双向绑定，每当我们修改了data中的数据，vue会默认监听数据改动，自动把最新的数据应用到页面上
</code></pre>
<!-- more -->
<p><strong>删除</strong></p>
<pre><code>//根据id删除数据
//如何根据id找到要删除对象的索引
//找到索引，直接调用数据的splice方法
</code></pre>
<p><strong>搜索</strong></p>
<pre><code>//根据关键字，进行数据搜索
</code></pre>
<p>完整代码实例</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;script src=&quot;./lib/vue-2.4.0.js&quot;&gt;&lt;/script&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;./lib/bootstrap-3.3.7.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id=&quot;app&quot;&gt;
        
        &lt;div class=&quot;panel panel-primary&quot;&gt;
              &lt;div class=&quot;panel-heading&quot;&gt;
                    &lt;h3 class=&quot;panel-title&quot;&gt;添加品牌&lt;/h3&gt;
              &lt;/div&gt;
              &lt;div class=&quot;panel-body form-inline&quot;&gt;
                    &lt;label&gt;
                        Id:
                        &lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model=&quot;id&quot;&gt;
                    &lt;/label&gt;
                    &lt;label&gt;
                        Name:
                        &lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model=&quot;name&quot;&gt;
                    &lt;/label&gt;
                    &lt;!-- 在Vue中，使用事件绑定机制，为元素指定处理函数的时候，如果加了小括号，就可以传参--&gt;
                    &lt;input type=&quot;button&quot; value=&quot;添加&quot; class=&quot;btn btn-primary&quot; @click=&quot;add()&quot;&gt;
                    &lt;label&gt;
                            搜索名称关键词:
                        &lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model=&quot;keywords&quot;&gt;
                    &lt;/label&gt;
              &lt;/div&gt;
        &lt;/div&gt;
        
        &lt;table class=&quot;table table-bordered table-hover table-striped&quot;&gt;
            &lt;thead&gt;
                &lt;tr&gt;
                    &lt;td&gt;Id&lt;/td&gt;
                    &lt;td&gt;Name&lt;/td&gt;
                    &lt;td&gt;Ctime&lt;/td&gt;
                    &lt;td&gt;Option&lt;/td&gt;
                &lt;/tr&gt;
            &lt;/thead&gt;
            &lt;tbody&gt;
                &lt;!--之前v-for数据都是直接从data上的list直接渲染过来的，现在，我们自定义一个search方法，同时把所有关键字，通过传参的形式传递给了search方法--&gt;
                &lt;!--在seach 方法内部，通过for循环，把所有符合关键字的数据，保存到一个新的数组里面--&gt;
                &lt;tr v-for=&quot;item in search1(keywords)&quot; :key=&quot;item.id&quot;&gt;
                    &lt;td&gt;{{item.id}}&lt;/td&gt;
                    &lt;td v-text=&quot;item.name&quot;&gt;&lt;/td&gt;
                    &lt;td&gt;{{item.ctime}}&lt;/td&gt;
                    &lt;td&gt;
                        &lt;a href=&quot;&quot; @click.prevent=&quot;del2(item.id)&quot;&gt;Delete&lt;/a&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
    &lt;script&gt;
        var vm = new Vue({
            el:'#app',
            data:{
                id: '',
                name:'',
                keywords:'',
                list:[
                    {id:1, name:'奔驰', ctime:new Date()},
                    {id:2, name:'宝马', ctime:new Date()},
                ]
            },
            methods:{
                add(){
                    //获取id和name，直接从data上面获取
                    // 组织一个对象
                    //把这个对象，调用数组的相关方法，添加到当前data上的list中
                    //在Vue中，已经实现数据的双向绑定，每当我们修改了data中的数据，vue会默认监听数据改动，自动把最新的数据应用到页面上
                    
                    var car ={id: this.id, name: this.name, ctime: new Date()}
                    this.list.push(car)
                    this.id = this.name=''
                },
                del(id){
                    //根据id删除数据
                    //如何根据id找到要删除对象的索引
                    //找到索引，直接调用数据的splice方法
                    this.list.some((item,i)=&gt;{
                       if(item.id == id){

                        this.list.splice(i,1)
                           //在数组的some方法中，如果return true就会立即终止这个数组后续循环
                           return true;
                       } 
                    })
                },
                del2(id){
                   var index = this.list.findIndex(item=&gt;{
                        if(item.id==id){
                            return true
                        }
                    })
                    //console.log(index)
                    this.list.splice(index,1)
                },
                search(keywords){
                    //根据关键字，进行数据搜索
                    var newList=[]
                    this.list.forEach(item=&gt;{
                        if(item.name.indexOf(keywords) != -1){
                            newList.push(item)
                        }
                    })
                    return newList
                },
                // forEach some filter findIndex 这些都属于数组的新方法，都会对数组中的每一项，执行相关的操作
                search1(keywords){
                    //根据关键字，进行数据搜索
                    return this.list.filter(item=&gt;{
                    //在ES6为字符串提供一个新方法，叫 String.prototype.includes('要包含的字符串')
                    //如果包含就是true，否则就会包含false
                   if(item.name.includes(keywords)){
                    return item
                   }
                   })
                   
                }
            }
        });
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue学习(十二): 内容总结前十一Vue学习]]></title>
        <id>https://ihopefulchina.github.io/vue-xue-xi-shi-er-nei-rong-zong-jie-qian-shi-yi-vue-xue-xi/</id>
        <link href="https://ihopefulchina.github.io/vue-xue-xi-shi-er-nei-rong-zong-jie-qian-shi-yi-vue-xue-xi/">
        </link>
        <updated>2019-09-04T05:48:51.000Z</updated>
        <summary type="html"><![CDATA[<p>主要学习了MVC和MVVM的区别、学习Vue基本的代码结构、基本指令: 差值表达式， v-cloak, v-text, v-html, v-bind(缩写:), v-on(缩写@), v-model, v-for, v-if, v-show、el 指定控制的区域 data 是对象，指定了控制区域内要用到的数据，methods 虽然带s后缀，但是个对象，这里可以放自定义方法、在vm示例中，如果要访问data上数据，或者访问methods中方法，必须带this、在v-for 注意key属性(接受string、number)、v-model 只能运用到表单元素、Vue中绑定样式2中方式 v-bind:class,v-model:style、v-if和v-show使用和特点等等。</p>
]]></summary>
        <content type="html"><![CDATA[<p>主要学习了MVC和MVVM的区别、学习Vue基本的代码结构、基本指令: 差值表达式， v-cloak, v-text, v-html, v-bind(缩写:), v-on(缩写@), v-model, v-for, v-if, v-show、el 指定控制的区域 data 是对象，指定了控制区域内要用到的数据，methods 虽然带s后缀，但是个对象，这里可以放自定义方法、在vm示例中，如果要访问data上数据，或者访问methods中方法，必须带this、在v-for 注意key属性(接受string、number)、v-model 只能运用到表单元素、Vue中绑定样式2中方式 v-bind:class,v-model:style、v-if和v-show使用和特点等等。</p>
<!-- more -->
<p>梳理一下：</p>
<h3 id="1mvc和mvvm的区别">1.MVC和MVVM的区别</h3>
<ol>
<li><img src="https://ihopefulchina.github.io/post-images/1567576221359.png" alt="" loading="lazy"></li>
</ol>
<h3 id="2学习vue基本的代码结构">2.学习Vue基本的代码结构</h3>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;
	&lt;title&gt;&lt;/title&gt;
    &lt;script src=&quot;./lib/vue.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;!--将来 new这个Vue实例控制这个元素所有内容 
    Vue实例所控制的这个元素区域，就是我们的 V --&gt;
&lt;div id=&quot;app&quot;&gt;
    &lt;p&gt;{{ msg }}&lt;/p&gt;

&lt;/div&gt;
&lt;script&gt;
//创建实例
//当我们导入包之后，在浏览器内存中，就多了一个Vue构造函数
//我们New出来的这个vm对象，就是我们MVVM中的VM调度者
 var vm = new Vue({
     el: '#app', //表示当前我们New这个Vue实例，要控制页面哪个区域
     data:{
         //data 属性中，存放的是el中需要的数据
         msg: 'Vue学习' //通过Vue提供的指令，很方便把数据渲染到页面上，程序员不在手动操作DOM元素[前端框架Vue之类的框架，不提倡我们手动操作DOM 元素]
     }
     //这里的data就是MVVM的M，专门保存每个页面的数据的
})
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;

</code></pre>
<h3 id="3基本指令-差值表达式-v-cloak-v-text-v-html-v-bind缩写-v-on缩写-v-model-v-for-v-if-v-show">3.基本指令: 差值表达式， v-cloak, v-text, v-html, v-bind(缩写:), v-on(缩写@), v-model, v-for, v-if, v-show</h3>
<ul>
<li>差值表达式: <code>&lt;span&gt;Message:{{msg}}&lt;/span&gt;</code></li>
<li>v-cloak: 当网络较慢，网页还在加载 Vue.js ，而导致 Vue 来不及渲染，这时页面就会显示出 Vue 源代码。我们可以使用 v-cloak 指令来解决这一问题。<code>&lt;p v-cloak&gt;{{msg}}&lt;/p&gt;</code>使用 v-cloak能够解决插值表达式闪烁问题,需要加<code>[v-cloak]{display: none;}</code></li>
<li>v-text: <code>&lt;h4 v-text=&quot;msg&quot;&gt;&lt;/h4&gt;</code></li>
<li>v-html: 可以输出html标签，<code>&lt;div v-html=&quot;msg2&quot;&gt;&lt;/div&gt;</code>，<code>msg2: '&lt;h1&gt;这是H1标签&lt;/h1&gt;',</code></li>
<li>v-bind(缩写:): 单向数据绑定<code>&lt;input type=&quot;button&quot; value=&quot;按钮&quot; :title=&quot;mytitle + ' 123'&quot; v-on:click=&quot;alert&quot;&gt;</code>， <code>mytitle: '定义的title'</code></li>
<li>v-on(缩写@): 用来绑定事件的, <code>&lt;input type=&quot;button&quot; value=&quot;按钮&quot; v-on:click=&quot;show&quot;&gt;</code>,<code>methods:{show: function(){alert('yes')} }</code></li>
<li>v-model: 双向数据绑定，一般用于用于表单元素</li>
<li>
<pre><code>v-for:遍历循环用的，可以放普通数组，对象数组，对象和数字。`&lt;p v-for=&quot;(user,i) in list&quot;&gt;索引值:{{i}}, 用户ID:{{user.id}}, 用户名称:{{user.name}}&lt;/p&gt;`，`list:[{id:1,name:&quot;a&quot;},{id:2,name:&quot;b&quot;}, {id:3,name:&quot;c&quot;},{id:4,name:&quot;d&quot;}, ]`
</code></pre>
</li>
<li>
<pre><code>v-if, v-show: 显示和隐藏元素，`&lt;h3 v-if=&quot;flag&quot;&gt;这是用v-if控制的元素&lt;/h3&gt;`,`&lt;h3 v-show=&quot;flag&quot;&gt;这是用v-show控制的元素&lt;/h3&gt;` 
</code></pre>
</li>
</ul>
<h3 id="4事件修饰符-stop-self-prevent-capture-once">4.事件修饰符 .stop, .self, .prevent, .capture, once</h3>
<ul>
<li>.stop: 阻止冒泡事件。</li>
<li>.prevet: 使用.prevet 阻止默认事件</li>
<li>.capture: 实现捕获触发事件的机制(从外到里捕获事件)</li>
<li>.self: 实现只有点击当期元素，才会触发事件函数</li>
<li>.once: 事件只触发一次处理函数 .prevent.once 顺序无所谓</li>
<li>使用.stop 与.self的区别: .self只会阻止自己身上的冒泡的行为触发，不会阻止别人的触发</li>
</ul>
<pre><code>&lt;!--使用.stop 阻止冒泡--&gt;
        &lt;div class=&quot;outer&quot; @click=&quot;div2Handler&quot;&gt;
            &lt;div class=&quot;inner&quot; @click=&quot;divHandler&quot;&gt;
                &lt;input type=&quot;button&quot; value=&quot;点击&quot; @click.stop=&quot;btnHandler&quot;&gt;
            &lt;/div&gt;
        &lt;/div&gt;
         &lt;!--使用 .self 阻止冒泡--&gt;
        &lt;div class=&quot;outer&quot; @click=&quot;div2Handler&quot;&gt;
            &lt;div class=&quot;inner&quot; @click.self=&quot;divHandler&quot;&gt;
                &lt;input type=&quot;button&quot; value=&quot;点击&quot; @click=&quot;btnHandler&quot;&gt;
            &lt;/div&gt;
        &lt;/div&gt;
</code></pre>
<h3 id="5el-指定控制的区域-data-是对象指定了控制区域内要用到的数据methods-虽然带s后缀但是个对象这里可以放自定义方法">5.el 指定控制的区域 data 是对象，指定了控制区域内要用到的数据，methods 虽然带s后缀，但是个对象，这里可以放自定义方法</h3>
<pre><code>&lt;div id=&quot;app&quot;&gt;
        &lt;input type=&quot;text&quot; v-model=&quot;n1&quot;&gt;
        &lt;select v-model=&quot;opt&quot;&gt;
            &lt;option value=&quot;+&quot;&gt;+&lt;/option&gt;
            &lt;option value=&quot;-&quot;&gt;-&lt;/option&gt;
            &lt;option value=&quot;*&quot;&gt;*&lt;/option&gt;
            &lt;option value=&quot;/&quot;&gt;/&lt;/option&gt;
        &lt;/select&gt;
        &lt;input type=&quot;text&quot; v-model=&quot;n2&quot;&gt;
        &lt;input type=&quot;button&quot; value=&quot;=&quot; @click=&quot;calc&quot;&gt;
        &lt;input type=&quot;text&quot; v-model=&quot;result&quot;&gt;
    &lt;/div&gt;
</code></pre>
<pre><code>&lt;script&gt;
    var vm = new Vue({
        el: '#app',
        data:{
            n1: 0,
            n2: 0,
            result: 0,
            opt:'+'
        },
        methods:{
            calc(){//计算器算数的方法
                //逻辑:
                //拿到n1,opt,n2值,this.result值计算
                var codeStr = 'parseInt(this.n1) ' +  this.opt + ' parseInt(this.n2)'
                this.result= eval(codeStr)
            }
        }
    })
    &lt;/script&gt;
</code></pre>
<h3 id="6在vm示例中如果要访问data上数据或者访问methods中方法必须带this">6.在vm示例中，如果要访问data上数据，或者访问methods中方法，必须带this</h3>
<figure data-type="image" tabindex="2"><img src="https://ihopefulchina.github.io/post-images/1567578008377.png" alt="" loading="lazy"></figure>
<h3 id="7在v-for-注意key属性接受string-number">7.在v-for 注意key属性(接受string、number)</h3>
<p>在组件中，使用v-for循环的时候，或者在一些特殊情况中，如果v-for有问题，必须要在使用v-for的同时，需要指定唯一的字符串/数字 类型 :key 值<br>
key 在使用的时候，必须使用v-bind属性绑定的形式，指定key值<br>
v-for循环的时候，只能用number或string</p>
<pre><code>&lt;div id=&quot;app&quot;&gt;
        &lt;div&gt;
            &lt;label&gt;ID:
                &lt;input type=&quot;text&quot; v-model=&quot;id&quot;&gt;
            &lt;/label&gt;
            &lt;label&gt;name:
                    &lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;
            &lt;/label&gt;
            &lt;input type=&quot;button&quot; value=&quot;添加&quot; @click=&quot;add1&quot;&gt;
        &lt;/div&gt;
        &lt;!--v-for循环的时候，只能用number或string--&gt;
        &lt;!--key 在使用的时候，必须使用v-bind属性绑定的形式，指定key值--&gt;
        &lt;!--在组件中，使用v-for循环的时候，或者在一些特殊情况中，如果v-for有问题，必须要在使用v-for的同时，需要指定唯一的字符串/数字 类型 :key 值--&gt;
        &lt;p v-for=&quot;item in list&quot; :key=&quot;item.id&quot;&gt;
            &lt;input type=&quot;checkbox&quot;&gt;
            ID: {{item.id}} , name: {{item.name}}
        &lt;/p&gt;
    &lt;/div&gt;
    &lt;script&gt;
        var vm = new Vue({
            el: '#app',
            data:{
                id:'',
                name:'',
                list:[
                {id:1,name: 'a'},
                {id:2,name: 'b'},
                {id:3,name: 'c'},
                {id:4,name: 'd'},
                {id:5,name: 'e'}
                ]
            },
            methods:{
                add(){//添加
                    this.list.push({id: this.id,name: this.name})
                },
                add1(){//添加
                    this.list.unshift
                    ({id: this.id,name: this.name})
                }
            }
        })
    &lt;/script&gt;
</code></pre>
<h3 id="8v-model-只能运用到表单元素">8.v-model 只能运用到表单元素</h3>
<figure data-type="image" tabindex="3"><img src="https://ihopefulchina.github.io/post-images/1567578109353.png" alt="" loading="lazy"></figure>
<h3 id="9vue中绑定样式2中方式-v-bindclassv-modelstyle">9.Vue中绑定样式2中方式 v-bind:class,v-model:style</h3>
<p><strong>:class</strong></p>
<ul>
<li>数组:<code>&lt;h1 :class=&quot;['red','thin']&quot;&gt;这是H1&lt;/h1&gt;</code></li>
<li>三元表达式： <code>&lt;h1 :class=&quot;['red','thin',flag?'active':'']&quot;&gt;这是H1&lt;/h1&gt;</code></li>
<li>数组使用对象代替三元表达式，提高代码的可读性:<code>&lt;h1 :class=&quot;['red','thin',{'active':flag} ]&quot;&gt;这是H1&lt;/h1&gt;</code></li>
<li>对象:<code>&lt;h1 :class=&quot;{red:false, thin: true, italic:true, active:false}&quot;&gt;这是H1&lt;/h1&gt;</code></li>
<li>直接指向:<code>&lt;h1 :class=&quot;classobj&quot;&gt;这是H1&lt;/h1&gt;</code></li>
</ul>
<pre><code>&lt;script&gt;
var vm = new Vue({
    el: '#app',
    data:{
        flag : true,
        classobj: {red:false, thin: true, italic:true, active:false}
    },
    methods:{

    }
})
&lt;/script&gt;
</code></pre>
<p><strong>:style</strong><br>
对象就是无序键值对的集合:<code>&lt;h1 :style=&quot;[styleobj,styleobj2]&quot;&gt;这是H1&lt;/h1&gt;</code></p>
<pre><code>&lt;script&gt;
    var vm = new Vue({
        el: '#app',
        data:{
            styleobj : { color:'red', 'font-weight':100 },
            styleobj2 : { 'font-style': 'italic' }
        },
        methods:{

        }
    })
    &lt;/script&gt;
</code></pre>
<h3 id="10v-if和v-show使用和特点">10.v-if和v-show使用和特点</h3>
<ul>
<li>v-if 的特点：每次都会重新删除或者创建元素; v-show的特点: 每次不会进行DOM元素的删除和创建的操作，只是切换了元素的display:none</li>
<li>v-if 有较高的切换性能消耗，v-show有较高的初始渲染消耗</li>
<li>如果元素涉及到频繁的切换，最好不要用v-if，用v-show; 如果元素可能永远不会被显示出来的话，则推荐v-if<br>
<img src="https://ihopefulchina.github.io/post-images/1567578168432.png" alt="" loading="lazy"></li>
</ul>
]]></content>
    </entry>
</feed>