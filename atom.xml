<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ihopefulchina.github.io</id>
    <title>Ihopeful Blog</title>
    <updated>2021-03-22T08:27:15.914Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ihopefulchina.github.io"/>
    <link rel="self" href="https://ihopefulchina.github.io/atom.xml"/>
    <subtitle>Sweat is the lubricant of success.</subtitle>
    <logo>https://ihopefulchina.github.io/images/avatar.png</logo>
    <icon>https://ihopefulchina.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Ihopeful Blog</rights>
    <entry>
        <title type="html"><![CDATA[函数式组件与类组件有何不同？]]></title>
        <id>https://ihopefulchina.github.io/dBAsSzkYF/</id>
        <link href="https://ihopefulchina.github.io/dBAsSzkYF/">
        </link>
        <updated>2021-02-09T07:05:53.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>函数式组件捕获了渲染所用的值。（Function components capture the rendered values.）</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>函数式组件捕获了渲染所用的值。（Function components capture the rendered values.）</p>
</blockquote>
<!-- more -->
<p>作者是 <a href="https://mobile.twitter.com/dan_abramov">Dan Abramov</a> , Facebook React 核心开发，Redux 作者</p>
<h3 id="博客地址">博客地址</h3>
<p><a href="https://overreacted.io/zh-hans/how-are-function-components-different-from-classes/">https://overreacted.io/zh-hans/how-are-function-components-different-from-classes/</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[useEffect 完整指南]]></title>
        <id>https://ihopefulchina.github.io/hmJz132Dl/</id>
        <link href="https://ihopefulchina.github.io/hmJz132Dl/">
        </link>
        <updated>2021-02-09T06:33:23.000Z</updated>
        <summary type="html"><![CDATA[<p>最近看了一篇blog文章，作者是 <a href="https://mobile.twitter.com/dan_abramov">Dan Abramov</a> , Facebook React 核心开发，Redux 作者，他这篇博客写的非常好，很详情介绍了useEffect，推荐大家去看看。</p>
]]></summary>
        <content type="html"><![CDATA[<p>最近看了一篇blog文章，作者是 <a href="https://mobile.twitter.com/dan_abramov">Dan Abramov</a> , Facebook React 核心开发，Redux 作者，他这篇博客写的非常好，很详情介绍了useEffect，推荐大家去看看。</p>
<!-- more -->
<blockquote>
<p>目前为止，useEffect主要用于数据请求。但是数据请求准确说并不是一个同步问题。因为我们的依赖经常是[]所以这一点尤其明显。那我们究竟在同步什么？</p>
</blockquote>
<h3 id="博客地址">博客地址</h3>
<p><a href="https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/">https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[React Native学习笔记· 4.运行环境的一些坑]]></title>
        <id>https://ihopefulchina.github.io/fSipHF4wD/</id>
        <link href="https://ihopefulchina.github.io/fSipHF4wD/">
        </link>
        <updated>2021-02-08T05:40:16.000Z</updated>
        <summary type="html"><![CDATA[<p>解决 React-Native mac 运行报错 error Failed to build iOS project. We ran &quot;xcodebuild&quot; command but it exited with error code 65. To debug build logs further, consider building your app with Xcode.app, by opening xxx.xcworkspace</p>
]]></summary>
        <content type="html"><![CDATA[<p>解决 React-Native mac 运行报错 error Failed to build iOS project. We ran &quot;xcodebuild&quot; command but it exited with error code 65. To debug build logs further, consider building your app with Xcode.app, by opening xxx.xcworkspace</p>
<!-- more -->
<h3 id="解决方法">解决方法</h3>
<p>参考:<a href="https://github.com/facebook/react-native/issues/20774">https://github.com/facebook/react-native/issues/20774</a></p>
<p>删除项目依赖包以及 yarn 缓存</p>
<pre><code>rm -rf node_modules &amp;&amp; yarn cache clean
</code></pre>
<p>重新装包</p>
<pre><code>yarn install
</code></pre>
<p>清除 React-Native 缓存</p>
<pre><code>rm -rf ~/.rncache
</code></pre>
<p>下载 React-Native IOS 运行依赖</p>
<pre><code> react-native run-ios 
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ React Native学习笔记· 3.交互]]></title>
        <id>https://ihopefulchina.github.io/react-native-xue-xi-bi-ji-3jiao-hu/</id>
        <link href="https://ihopefulchina.github.io/react-native-xue-xi-bi-ji-3jiao-hu/">
        </link>
        <updated>2021-02-07T08:39:57.000Z</updated>
        <summary type="html"><![CDATA[<p>这部分文档，我看到有点云里雾里，后续上手需要翻阅一下。</p>
]]></summary>
        <content type="html"><![CDATA[<p>这部分文档，我看到有点云里雾里，后续上手需要翻阅一下。</p>
<!-- more -->
<ol>
<li>处理触摸事件。<code>&lt;Button onPress={onPressButton}title=&quot;Press Me&quot;/&gt;</code> 长按是采用<code>onLongPress</code> 。</li>
<li>React Navigation 这个 有点像Taro的Navigator, 后续翻阅文档<a href="https://reactnavigation.org/docs/getting-started">React Navigation</a>。</li>
<li>动画 ，
<ul>
<li><code>Animated</code> 使用demo</li>
</ul>
</li>
</ol>
<pre><code>    import React, { useRef, useEffect } from 'react';
    import { Animated, Text, View } from 'react-native';
    const FadeInView = (props) =&gt; {
    const fadeAnim = useRef(new Animated.Value(0)).current  // 透明度初始值设为0

    React.useEffect(() =&gt; {
        Animated.timing(                  // 随时间变化而执行动画
        fadeAnim,                       // 动画中的变量值
        {
            toValue: 1,                   // 透明度最终变为1，即完全不透明
            duration: 10000,              // 让动画持续一段时间
        }
        ).start();                        // 开始执行动画
    }, [fadeAnim])

    return (
        &lt;Animated.View                 // 使用专门的可动画化的View组件
        style={{
            ...props.style,
            opacity: fadeAnim,         // 将透明度绑定到动画变量值
        }}
        &gt;
        {props.children}
        &lt;/Animated.View&gt;
    );
    }

    // 然后你就可以在组件中像使用`View`那样去使用`FadeInView`了
    export default () =&gt; {
    return (
        &lt;View style={{flex: 1, alignItems: 'center', justifyContent: 'center'}}&gt;
        &lt;FadeInView style={{width: 250, height: 50, backgroundColor: 'powderblue'}}&gt;
            &lt;Text style={{fontSize: 28, textAlign: 'center', margin: 10}}&gt;Fading in&lt;/Text&gt;
        &lt;/FadeInView&gt;
        &lt;/View&gt;
    )
    }
</code></pre>
<ol start="4">
<li>响应者的生命周期。<br>
View.props.onStartShouldSetResponder: (evt) =&gt; true, - 在用户开始触摸的时候（手指刚刚接触屏幕的瞬间），是否愿意成为响应者？<br>
View.props.onMoveShouldSetResponder: (evt) =&gt; true, - 如果 View 不是响应者，那么在每一个触摸点开始移动（没有停下也没有离开屏幕）时再询问一次：是否愿意响应触摸交互呢？<br>
如果 View 返回 true，并开始尝试成为响应者，那么会触发下列事件之一:<br>
View.props.onResponderGrant: (evt) =&gt; {} - View 现在要开始响应触摸事件了。这也是需要做高亮的时候，使用户知道他到底点到了哪里。<br>
View.props.onResponderReject: (evt) =&gt; {} - 响应者现在“另有其人”而且暂时不会“放权”，请另作安排。<br>
如果 View 已经开始响应触摸事件了，那么下列这些处理函数会被一一调用：<br>
View.props.onResponderMove: (evt) =&gt; {} - 用户正在屏幕上移动手指时（没有停下也没有离开屏幕）。<br>
View.props.onResponderRelease: (evt) =&gt; {} - 触摸操作结束时触发，比如&quot;touchUp&quot;（手指抬起离开屏幕）。<br>
View.props.onResponderTerminationRequest: (evt) =&gt; true - 有其他组件请求接替响应者，当前的 View 是否“放权”？返回 true 的话则释放响应者权力。<br>
View.props.onResponderTerminate: (evt) =&gt; {} - 响应者权力已经交出。这可能是由于其他 View 通过onResponderTerminationRequest请求的，也可能是由操作系统强制夺权（比如 iOS 上的控制中心或是通知中心）。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[React Native学习笔记· 2. 环境搭建]]></title>
        <id>https://ihopefulchina.github.io/react-native-xue-xi-bi-ji-2-huan-jing-da-jian/</id>
        <link href="https://ihopefulchina.github.io/react-native-xue-xi-bi-ji-2-huan-jing-da-jian/">
        </link>
        <updated>2021-02-07T07:28:35.000Z</updated>
        <summary type="html"><![CDATA[<p>浏览了一下官网的安装流程，发现需要安装的有点多，所以感觉有必要纪录一下。<br>
我选择平台是ios(swift)+mac：<br>
把 React Native 组件集成到 iOS 应用中有如下几个主要步骤：</p>
]]></summary>
        <content type="html"><![CDATA[<p>浏览了一下官网的安装流程，发现需要安装的有点多，所以感觉有必要纪录一下。<br>
我选择平台是ios(swift)+mac：<br>
把 React Native 组件集成到 iOS 应用中有如下几个主要步骤：</p>
<!-- more -->
<h3 id="搭建开发环境">搭建开发环境</h3>
<p>必须安装的依赖有：Node、Watchman、Xcode 和 CocoaPods。</p>
<p>首先需要安装<a href="https://apps.apple.com/cn/app/xcode/id497799835?mt=12">Xcode</a>和<a href="https://brew.sh/">Homebrew</a></p>
<pre><code># 安装node
brew install node

# 安装watchman
brew install watchman

# 使用nrm工具切换淘宝源
npx nrm use taobao

# 安装Yarn
npm install -g yarn

# 安装cocoapods
brew install cocoapods
</code></pre>
<p>详情地址: <a href="https://www.react-native.cn/docs/environment-setup">https://www.react-native.cn/docs/environment-setup</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[React Native学习笔记· 1. 官网入门基础]]></title>
        <id>https://ihopefulchina.github.io/react-native-xue-xi-bi-ji-1-guan-wang-ru-men-ji-chu/</id>
        <link href="https://ihopefulchina.github.io/react-native-xue-xi-bi-ji-1-guan-wang-ru-men-ji-chu/">
        </link>
        <updated>2021-02-07T05:54:53.000Z</updated>
        <summary type="html"><![CDATA[<p>看了一下，部分内容有点像Taro(Taro借鉴react和rn), 官网推荐使用函数和class这2种方式写，考虑到react 开发团队转向hooks，所以我将都用函数式写。</p>
]]></summary>
        <content type="html"><![CDATA[<p>看了一下，部分内容有点像Taro(Taro借鉴react和rn), 官网推荐使用函数和class这2种方式写，考虑到react 开发团队转向hooks，所以我将都用函数式写。</p>
<!-- more -->
<p>不过也有几点不太一样：</p>
<ol>
<li>textInpnut等同于的Taro的input,onChangeText属性等同于onInput</li>
</ol>
<pre><code>&lt;TextInput
    style={{height: 40}}
    placeholder=&quot;Type here to translate!&quot;
    onChangeText={text =&gt; setText(text)}
    defaultValue={text}
/&gt;
</code></pre>
<ol start="2">
<li>有一个长列表概念，FlatList，需要2个属性，data和renderItem，字面意思，data是列表的数据源，而renderItem则从数据源中逐个解析数据，然后返回一个设定好格式的组件来渲染。不过感觉缺少双击回到顶部和下拉刷新等等功能，后续我尝试封装一下。</li>
</ol>
<pre><code>   &lt;FlatList
        data={[]}
        renderItem={({item}) =&gt; &lt;Text&gt;{item}&lt;/Text&gt;}
      /&gt;
</code></pre>
<ol start="3">
<li>
<p>Platform模块。提供了一个检测当前运行平台的模块。<br>
-  <code>Platform.OS</code>  ， 在 iOS 上会返回ios，而在 Android 设备或模拟器上则会返回android。<br>
-   <code>Platform.select()</code>  , 它可以以 Platform.OS 为 key，从传入的对象中返回对应平台的值。  <code>Platform.select({os: () =&gt; require('ComponentIOS'), android: () =&gt; require('ComponentAndroid')})</code><br>
-   <code>Platform.Version</code> 在安卓表示 api level， ios表示表示当前系统版本</p>
</li>
<li>
<p>特定平台扩展名。有点像Taro 在不同平台使用特定文件。React Native 会检测某个文件是否具有.ios.或是.android.的扩展名，然后根据当前运行的平台自动加载正确对应的文件。</p>
</li>
<li>
<p><code>Button</code> 点击事件是<code>onPress</code>。</p>
</li>
<li>
<p>定义样式：<code>const styles = StyleSheet.create({})</code>。</p>
</li>
<li>
<p>定义宽高3种方式：</p>
<ol>
<li><code>&lt;View style={{width: 50, height: 50}} /&gt;</code> 无单位指定宽高。</li>
<li><code>&lt;View style={{flex: 1}} /&gt;</code> felx 弹性布局宽高。</li>
<li><code>&lt;View style={{width: '66%', height: '35%', }} /&gt;</code> 百分比方式</li>
</ol>
</li>
<li>
<p>布局采用flex的方式 <code>flexBox</code>。</p>
</li>
<li>
<p><a href="https://www.react-native.cn/docs/components-and-apis">更多核心组件和api</a>。</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[React hooks todo]]></title>
        <id>https://ihopefulchina.github.io/react-hooks-todo/</id>
        <link href="https://ihopefulchina.github.io/react-hooks-todo/">
        </link>
        <updated>2021-02-07T02:30:08.000Z</updated>
        <summary type="html"><![CDATA[<p>地址: <a href="https://github.com/ihopefulChina/react-hooks-todo">todoList</a></p>
<p>个人练手项目 React hooks +  ts</p>
]]></summary>
        <content type="html"><![CDATA[<p>地址: <a href="https://github.com/ihopefulChina/react-hooks-todo">todoList</a></p>
<p>个人练手项目 React hooks +  ts</p>
<!-- more -->
<h2 id="安装">安装</h2>
<pre><code class="language-sh">yarn
</code></pre>
<h2 id="调试">调试</h2>
<pre><code class="language-sh">yarn start
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数据增减计算 for Taro]]></title>
        <id>https://ihopefulchina.github.io/shu-ju-zeng-jian-ji-suan-for-taro/</id>
        <link href="https://ihopefulchina.github.io/shu-ju-zeng-jian-ji-suan-for-taro/">
        </link>
        <updated>2021-02-07T02:23:13.000Z</updated>
        <summary type="html"><![CDATA[<p>前端计算增减数据. Taro 2.x + TS</p>
<p>支持多端迁移，新建数据增减计算</p>
]]></summary>
        <content type="html"><![CDATA[<p>前端计算增减数据. Taro 2.x + TS</p>
<p>支持多端迁移，新建数据增减计算</p>
<!-- more -->
<p>地址:<a href="https://github.com/ihopefulChina/add-data-calculation-for-Taro">数据增减计算</a></p>
<h2 id="效果图">效果图</h2>
<figure data-type="image" tabindex="1"><img src="https://ihopefulchina.github.io/post-images/1612664674204.png" alt="demo" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Taro 日历 多选]]></title>
        <id>https://ihopefulchina.github.io/taro-ri-li-duo-xuan/</id>
        <link href="https://ihopefulchina.github.io/taro-ri-li-duo-xuan/">
        </link>
        <updated>2021-02-07T02:00:38.000Z</updated>
        <summary type="html"><![CDATA[<p>我翻阅了很多 Taro 相关插件和方法，都没有找到一个支持多选（不连续选择日期）的插件，所以自己写了一个组件，目前还很简单，后期会加上 Props 封装。</p>
]]></summary>
        <content type="html"><![CDATA[<p>我翻阅了很多 Taro 相关插件和方法，都没有找到一个支持多选（不连续选择日期）的插件，所以自己写了一个组件，目前还很简单，后期会加上 Props 封装。</p>
<!-- more -->
<p>地址:  <a href="https://github.com/ihopefulChinaTaro-Calendar-Multiple-choice-checkbox">Taro 日历 多选</a></p>
<p>Taro 2.x + TS</p>
<p>目前支持的功能:</p>
<ol>
<li>多选，不连续多选日期</li>
<li>支持切换月份</li>
<li>保留上次选择，多选</li>
</ol>
<p>后期会封装这个组件，加上这些功能</p>
<ol>
<li>日历滑动</li>
<li>。。。</li>
</ol>
<p>样式示例</p>
<figure data-type="image" tabindex="1"><img src="https://ihopefulchina.github.io/post-images/1612664208415.png" alt="demo img" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue: 移动端 h5 动画 Web]]></title>
        <id>https://ihopefulchina.github.io/vue-shi-zhan-er-yi-dong-duan-h5-dong-hua-web/</id>
        <link href="https://ihopefulchina.github.io/vue-shi-zhan-er-yi-dong-duan-h5-dong-hua-web/">
        </link>
        <updated>2020-05-11T06:10:27.000Z</updated>
        <summary type="html"><![CDATA[<p>基于vue开发，vue-cli脚手架搭建，在线演示地址: http://h5.hpfgmy.site/</p>
<p>目前有部分音频bug，推测是缓存方面的原因，后续有空解决这个bug。</p>
<p>源码地址：https://github.com/ihopefulChina/Mobile-H5-web-for-vue</p>
]]></summary>
        <content type="html"><![CDATA[<p>基于vue开发，vue-cli脚手架搭建，在线演示地址: http://h5.hpfgmy.site/</p>
<p>目前有部分音频bug，推测是缓存方面的原因，后续有空解决这个bug。</p>
<p>源码地址：https://github.com/ihopefulChina/Mobile-H5-web-for-vue</p>
<!-- more -->
<figure data-type="image" tabindex="1"><img src="https://ihopefulchina.github.io/post-images/1589177491662.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
</feed>