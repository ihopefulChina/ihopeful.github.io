<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ihopefulchina.github.io</id>
    <title>Ihopeful Blog</title>
    <updated>2019-09-03T07:30:50.974Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ihopefulchina.github.io"/>
    <link rel="self" href="https://ihopefulchina.github.io/atom.xml"/>
    <subtitle>纪录个人所见所闻所得</subtitle>
    <logo>https://ihopefulchina.github.io/images/avatar.png</logo>
    <icon>https://ihopefulchina.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, Ihopeful Blog</rights>
    <entry>
        <title type="html"><![CDATA[Vue学习(七): 简易计算器案例]]></title>
        <id>https://ihopefulchina.github.io/post/vue-xue-xi-qi-jian-yi-ji-suan-qi-an-li</id>
        <link href="https://ihopefulchina.github.io/post/vue-xue-xi-qi-jian-yi-ji-suan-qi-an-li">
        </link>
        <updated>2019-09-03T06:57:17.000Z</updated>
        <summary type="html"><![CDATA[<p>简易计算器案例很简陋，目的是为了加深学习v-model 数据双向绑定</p>
]]></summary>
        <content type="html"><![CDATA[<p>简易计算器案例很简陋，目的是为了加深学习v-model 数据双向绑定</p>
<!-- more -->
<h3 id="第一种写法">第一种写法</h3>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id=&quot;app&quot;&gt;
        &lt;input type=&quot;text&quot; v-model=&quot;n1&quot;&gt;
        &lt;select v-model=&quot;opt&quot;&gt;
            &lt;option value=&quot;+&quot;&gt;+&lt;/option&gt;
            &lt;option value=&quot;-&quot;&gt;-&lt;/option&gt;
            &lt;option value=&quot;*&quot;&gt;*&lt;/option&gt;
            &lt;option value=&quot;/&quot;&gt;/&lt;/option&gt;
        &lt;/select&gt;
        &lt;input type=&quot;text&quot; v-model=&quot;n2&quot;&gt;
        &lt;input type=&quot;button&quot; value=&quot;=&quot; @click=&quot;calc&quot;&gt;
        &lt;input type=&quot;text&quot; v-model=&quot;result&quot;&gt;
    &lt;/div&gt;
    &lt;script&gt;
    var vm = new Vue({
        el: '#app',
        data:{
            n1: 0,
            n2: 0,
            result: 0,
            opt:'+'
        },
        methods:{
            calc(){//计算器算数的方法
                //逻辑:
                //拿到n1,opt,n2值,this.result值计算
                switch(this.opt){
                    case '+':
                        this.result= parseInt(this.n1) + parseInt(this.n2)
                        break;
                    case '-':
                        this.result= parseInt(this.n1) - parseInt(this.n2)
                        break;
                    case '*':
                        this.result= parseInt(this.n1) * parseInt(this.n2)
                        break;
                    case '/':
                        this.result= parseInt(this.n1) / parseInt(this.n2)
                        break;
                }
            }
        }
    })
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="第二种有点投机取巧正式开发中最好不要这样操作">第二种有点投机取巧，正式开发中，最好不要这样操作</h3>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id=&quot;app&quot;&gt;
        &lt;input type=&quot;text&quot; v-model=&quot;n1&quot;&gt;
        &lt;select v-model=&quot;opt&quot;&gt;
            &lt;option value=&quot;+&quot;&gt;+&lt;/option&gt;
            &lt;option value=&quot;-&quot;&gt;-&lt;/option&gt;
            &lt;option value=&quot;*&quot;&gt;*&lt;/option&gt;
            &lt;option value=&quot;/&quot;&gt;/&lt;/option&gt;
        &lt;/select&gt;
        &lt;input type=&quot;text&quot; v-model=&quot;n2&quot;&gt;
        &lt;input type=&quot;button&quot; value=&quot;=&quot; @click=&quot;calc&quot;&gt;
        &lt;input type=&quot;text&quot; v-model=&quot;result&quot;&gt;
    &lt;/div&gt;
    &lt;script&gt;
    var vm = new Vue({
        el: '#app',
        data:{
            n1: 0,
            n2: 0,
            result: 0,
            opt:'+'
        },
        methods:{
            calc(){//计算器算数的方法
                //逻辑:
                //拿到n1,opt,n2值,this.result值计算
                var codeStr = 'parseInt(this.n1) ' +  this.opt + ' parseInt(this.n2)'
                this.result= eval(codeStr)
            }
        }
    })
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue学习(六): v-model实现表单元素的数据双向绑定]]></title>
        <id>https://ihopefulchina.github.io/post/vue-xue-xi-wu-v-model-shi-xian-biao-dan-yuan-su-de-shu-ju-shuang-xiang-bang-ding</id>
        <link href="https://ihopefulchina.github.io/post/vue-xue-xi-wu-v-model-shi-xian-biao-dan-yuan-su-de-shu-ju-shuang-xiang-bang-ding">
        </link>
        <updated>2019-09-03T06:52:30.000Z</updated>
        <summary type="html"><![CDATA[<p>v-model指令，可以实现表单元素和Model中数据的双向数据绑定，但v-model只能运用到表单元素中(表单控件在实际的业务场景中是比较常见的，单选，多选，下拉选择，输入框等，用这些控件可以完成数据的录入、校验以及提交等。vue给我们提供了v-model指令用于在表单类元素上双向绑定数据。 )</p>
]]></summary>
        <content type="html"><![CDATA[<p>v-model指令，可以实现表单元素和Model中数据的双向数据绑定，但v-model只能运用到表单元素中(表单控件在实际的业务场景中是比较常见的，单选，多选，下拉选择，输入框等，用这些控件可以完成数据的录入、校验以及提交等。vue给我们提供了v-model指令用于在表单类元素上双向绑定数据。 )</p>
<!-- more -->
<p>代码示例</p>
<pre><code>&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;style&gt;
        input{
            width: 100%;
            padding: 15px 10px;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id=&quot;app&quot;&gt;
      &lt;h4&gt;{{msg}}&lt;/h4&gt;
      &lt;!--v-bind:(:)只能实现数据的单向绑定，从M 绑定到V--&gt;
      &lt;input type=&quot;text&quot; name=&quot;name&quot; :value=&quot;msg&quot;&gt;
      &lt;!--v-model指令，可以实现表单元素和Model中数据的双向数据绑定--&gt;
      &lt;!--v-model只能运用到表单元素中--&gt;
      &lt;input type=&quot;text&quot; name=&quot;name&quot; v-model=&quot;msg&quot;&gt;
    &lt;/div&gt;
    &lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;
    &lt;script&gt;
        var vm = new Vue({
            el: '#app',
            data:{
                msg: '这个Messge里面内容'
            },
            methods:{
             
            }
        })
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p><img src="https://ihopefulchina.github.io/post-images/1567493670785.png" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue学习(五): 事件修饰符]]></title>
        <id>https://ihopefulchina.github.io/post/vue-xue-xi-wu-shi-jian-xiu-shi-fu</id>
        <link href="https://ihopefulchina.github.io/post/vue-xue-xi-wu-shi-jian-xiu-shi-fu">
        </link>
        <updated>2019-09-03T05:43:33.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="事件修饰符">事件修饰符:</h3>
<ol>
<li>.stop 阻止冒泡</li>
<li>.prevent 阻止默认事件</li>
<li>.capture 添加事件侦听器时使用事件捕获模式</li>
<li>.self 只当事件在该元素(比如不是子元素)触发时触发回调</li>
<li>.once 只触发一次</li>
</ol>
]]></summary>
        <content type="html"><![CDATA[<h3 id="事件修饰符">事件修饰符:</h3>
<ol>
<li>.stop 阻止冒泡</li>
<li>.prevent 阻止默认事件</li>
<li>.capture 添加事件侦听器时使用事件捕获模式</li>
<li>.self 只当事件在该元素(比如不是子元素)触发时触发回调</li>
<li>.once 只触发一次</li>
</ol>
<!-- more -->
<h4 id="stop-阻止冒泡">.stop 阻止冒泡</h4>
<pre><code>&lt;!--使用.stop 阻止冒泡--&gt;
        &lt;div class=&quot;inner&quot; @click=&quot;divHandler&quot;&gt;
            &lt;input type=&quot;button&quot; value=&quot;点击&quot; @click.stop=&quot;btnHandler&quot;&gt;
        &lt;/div&gt;
</code></pre>
<h4 id="prevent-阻止默认事件">.prevent 阻止默认事件</h4>
<pre><code>&lt;!--使用.prevet 阻止默认事件--&gt;
        &lt;a href=&quot;http://baidu.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; @click.prevent=&quot;linkclick&quot;&gt;点击百度&lt;/a&gt;
</code></pre>
<h4 id="capture-添加事件侦听器时使用事件捕获模式">.capture 添加事件侦听器时使用事件捕获模式</h4>
<pre><code>&lt;!--使用.capture 实现捕获触发事件的机制(从外到里捕获事件)--&gt;
        &lt;div class=&quot;inner&quot; @click.capture=&quot;divHandler&quot;&gt;
            &lt;input type=&quot;button&quot; value=&quot;点击&quot; @click.stop=&quot;btnHandler&quot;&gt;
        &lt;/div&gt;
</code></pre>
<h4 id="self-只当事件在该元素比如不是子元素触发时触发回调">self 只当事件在该元素(比如不是子元素)触发时触发回调</h4>
<pre><code>&lt;!--使用.self 实现只有点击当期元素，才会触发事件函数--&gt;
        &lt;div class=&quot;inner&quot; @click.self=&quot;divHandler&quot;&gt;
            &lt;input type=&quot;button&quot; value=&quot;点击&quot; @click.stop=&quot;btnHandler&quot;&gt;
        &lt;/div&gt;
</code></pre>
<h4 id="once-只触发一次">.once 只触发一次</h4>
<pre><code>&lt;!--使用.once 事件只触发一次处理函数 .prevent.once 顺序无所谓--&gt;
        &lt;a href=&quot;http://baidu.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; @click.prevent.once=&quot;linkclick&quot;&gt;点击百度&lt;/a&gt;
</code></pre>
<h3 id="使用stop-与self的区别">使用.stop 与.self的区别</h3>
<p>.self只会阻止自己身上的冒泡的行为触发，不会阻止别人的触发</p>
<pre><code>&lt;!--使用.stop 阻止冒泡--&gt;
        &lt;div class=&quot;outer&quot; @click=&quot;div2Handler&quot;&gt;
            &lt;div class=&quot;inner&quot; @click=&quot;divHandler&quot;&gt;
                &lt;input type=&quot;button&quot; value=&quot;点击&quot; @click.stop=&quot;btnHandler&quot;&gt;
            &lt;/div&gt;
        &lt;/div&gt;
         &lt;!--使用 .self 阻止冒泡--&gt;
        &lt;div class=&quot;outer&quot; @click=&quot;div2Handler&quot;&gt;
            &lt;div class=&quot;inner&quot; @click.self=&quot;divHandler&quot;&gt;
                &lt;input type=&quot;button&quot; value=&quot;点击&quot; @click=&quot;btnHandler&quot;&gt;
            &lt;/div&gt;
        &lt;/div&gt;
</code></pre>
<p>完成代码示例</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;
    &lt;style&gt;
        .inner{
            height: 150px;
            background-color: darkcyan;
            margin: 15px 0
        }
        .outer{
            padding: 40px;
            background-color: red;
            margin: 15px 0
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id=&quot;app&quot;&gt;
        &lt;!--使用.stop 阻止冒泡--&gt;
        &lt;div class=&quot;inner&quot; @click=&quot;divHandler&quot;&gt;
            &lt;input type=&quot;button&quot; value=&quot;点击&quot; @click.stop=&quot;btnHandler&quot;&gt;
        &lt;/div&gt;

        &lt;!--使用.prevet 阻止默认事件--&gt;
        &lt;a href=&quot;http://baidu.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; @click.prevent=&quot;linkclick&quot;&gt;点击百度&lt;/a&gt;

        &lt;!--使用.capture 实现捕获触发事件的机制(从外到里捕获事件)--&gt;
        &lt;div class=&quot;inner&quot; @click.capture=&quot;divHandler&quot;&gt;
            &lt;input type=&quot;button&quot; value=&quot;点击&quot; @click.stop=&quot;btnHandler&quot;&gt;
        &lt;/div&gt;

        &lt;!--使用.self 实现只有点击当期元素，才会触发事件函数--&gt;
        &lt;div class=&quot;inner&quot; @click.self=&quot;divHandler&quot;&gt;
            &lt;input type=&quot;button&quot; value=&quot;点击&quot; @click.stop=&quot;btnHandler&quot;&gt;
        &lt;/div&gt;

        &lt;!--使用.once 事件只触发一次处理函数 .prevent.once 顺序无所谓--&gt;
        &lt;a href=&quot;http://baidu.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; @click.prevent.once=&quot;linkclick&quot;&gt;点击百度&lt;/a&gt;

        &lt;!--使用.stop 与.self的区别
        .self只会阻止自己身上的冒泡的行为触发，不会阻止别人的触发
        --&gt;
        &lt;!--使用.stop 阻止冒泡--&gt;
        &lt;div class=&quot;outer&quot; @click=&quot;div2Handler&quot;&gt;
            &lt;div class=&quot;inner&quot; @click=&quot;divHandler&quot;&gt;
                &lt;input type=&quot;button&quot; value=&quot;点击&quot; @click.stop=&quot;btnHandler&quot;&gt;
            &lt;/div&gt;
        &lt;/div&gt;
         &lt;!--使用 .self 阻止冒泡--&gt;
        &lt;div class=&quot;outer&quot; @click=&quot;div2Handler&quot;&gt;
            &lt;div class=&quot;inner&quot; @click.self=&quot;divHandler&quot;&gt;
                &lt;input type=&quot;button&quot; value=&quot;点击&quot; @click=&quot;btnHandler&quot;&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;script&gt;
    var vm= new Vue({
        el: '#app',
        data:{

        },
        methods:{
            divHandler(){
                console.log('触发inner div的点击事件')
            },
            btnHandler(){
                console.log('触发btn 的点击事件')
            },
            linkclick()
            {
                console.log('触发link的点击事件')
            },
            div2Handler(){
                console.log('触发outer 的点击事件')
            }
        }
    });
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue学习(四): 跑马灯效果案例 ]]></title>
        <id>https://ihopefulchina.github.io/post/vue-xue-xi-si-pao-ma-deng-xiao-guo-an-li</id>
        <link href="https://ihopefulchina.github.io/post/vue-xue-xi-si-pao-ma-deng-xiao-guo-an-li">
        </link>
        <updated>2019-09-03T04:54:11.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="开启跑马灯效果分析思路">开启跑马灯效果分析思路</h3>
<ol>
<li>给开启按钮绑定一个点击事件 v-on @</li>
<li>在按钮的处理事件函数，写相关的业务逻辑代码:拿到msg字符串，然后调用字符串的substring来进行字符串的截取，把第一个字符串截取出到最后一个</li>
<li>为了实现点击按钮，自动截取功能，需要把2步骤中的代码，放到一个计时器里面。</li>
</ol>
]]></summary>
        <content type="html"><![CDATA[<h3 id="开启跑马灯效果分析思路">开启跑马灯效果分析思路</h3>
<ol>
<li>给开启按钮绑定一个点击事件 v-on @</li>
<li>在按钮的处理事件函数，写相关的业务逻辑代码:拿到msg字符串，然后调用字符串的substring来进行字符串的截取，把第一个字符串截取出到最后一个</li>
<li>为了实现点击按钮，自动截取功能，需要把2步骤中的代码，放到一个计时器里面。</li>
</ol>
<!-- more -->
<p>代码示例:</p>
<pre><code>&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id=&quot;app&quot;&gt;
        &lt;h4&gt;{{msg}}&lt;/h4&gt;
        &lt;input type=&quot;button&quot; value=&quot;开启&quot; @click=&quot;on&quot;&gt;
        &lt;input type=&quot;button&quot; value=&quot;关闭&quot;&gt;
    &lt;/div&gt;
    &lt;script&gt;
    var vm =new Vue({
        //注意在vm实例中，如果获取data数据/methods中的方法，都需要通过this.数据属性名和方法名，这里的this.表示new vue的实例
        el: '#app',
        data:{
            msg: '跑马灯效果开启效果！！！'
        },
        methods:{
            on(){
                setInterval(()=&gt;{
                    //获取第一个字符
                    var start = this.msg.substring(0,1)
                    //获取后面的所有字符
                    var end = this.msg.substring(1)
                    //重新拼接(马灯效果开启效果！！！跑),并赋值给 this.msg
                    this.msg = end + start
                }, 400)
               
            }
        }
    
    })
    //步骤分析
    //1.给开启按钮绑定一个点击事件 v-on @
    //2.在按钮的处理事件函数，写相关的业务逻辑代码:拿到msg字符串，然后调用字符串的substring来进行字符串的截取，把第一个字符串截取出到最后一个
    //3.为了实现点击按钮，自动截取功能，需要把2步骤中的代码，放到一个计时器里面。
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p><strong>注意:</strong></p>
<ol>
<li>在vm实例中，如果获取data数据/methods中的方法，都需要通过this.数据属性名和方法名，这里的this.表示new vue的实例</li>
</ol>
<pre><code>console.log(this.msg) 
</code></pre>
<ol start="2">
<li>VM实例会监听自己身上data中所有数据的变化，如果数据一发生变化，就会自动把最新的数据，从data上同步到页面中去(好处:减少DOM操作)</li>
</ol>
<p>完整代码示例</p>
<pre><code>&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id=&quot;app&quot;&gt;
        &lt;h4&gt;{{msg}}&lt;/h4&gt;
        &lt;input type=&quot;button&quot; value=&quot;开启&quot; @click=&quot;on&quot;&gt;
        &lt;input type=&quot;button&quot; value=&quot;关闭&quot; @click=&quot;stop&quot;&gt;
    &lt;/div&gt;
    &lt;script&gt;
    var vm =new Vue({
        //注意在vm实例中，如果获取data数据/methods中的方法，都需要通过this.数据属性名和方法名，这里的this.表示new vue的实例
        el: '#app',
        data:{
            msg: '跑马灯效果开启效果！！！',
            intervalId: null //在data上定义定时器id
        },
        methods:{
            on(){
                if(this.intervalId != null){
                    return
                }
                this.intervalId = setInterval(()=&gt;{
                
                    //获取第一个字符
                    var start = this.msg.substring(0,1)
                    //获取后面的所有字符
                    var end = this.msg.substring(1)
                    //重新拼接(马灯效果开启效果！！！跑),并赋值给 this.msg
                    this.msg = end + start
                }, 400)
               
            },
            stop(){//停止定时器
                clearInterval(this.intervalId)
                //每当清除定时器之后，需要把intervalId定义为null
                this.intervalId = null
            }
        }
    
    })
    //步骤分析
    //1.给开启按钮绑定一个点击事件 v-on @
    //2.在按钮的处理事件函数，写相关的业务逻辑代码:拿到msg字符串，然后调用字符串的substring来进行字符串的截取，把第一个字符串截取出到最后一个
    //3.为了实现点击按钮，自动截取功能，需要把2步骤中的代码，放到一个计时器里面。
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue学习(三): v-bind、v-on指令的学习]]></title>
        <id>https://ihopefulchina.github.io/post/vue-xue-xi-san-v-bind-zhi-ling-de-xue-xi</id>
        <link href="https://ihopefulchina.github.io/post/vue-xue-xi-san-v-bind-zhi-ling-de-xue-xi">
        </link>
        <updated>2019-09-03T03:45:37.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="v-bind是vue中提供的绑定属性的指令">v-bind是Vue中提供的绑定属性的指令。</h3>
<p>v-bind 指令被用来响应地更新 HTML 属性，其实它是支持一个单一 JavaScript 表达式 （v-for 除外）。<br>
完整语法：<code>&lt;span v-bind:class=&quot;classProperty&quot;&gt;&lt;/span &gt;</code>，解释：v-bind 是指令，: 后面的 class 是参数，classProperty 则在官方文档中被称为“预期值”。<br>
缩写语法：<code>&lt;span :class=&quot;classProperty&quot;&gt;&lt;/span &gt;</code>，解释：: 后面的 class 是参数，classProperty 则在官方文档中被称为“预期值”。</p>
]]></summary>
        <content type="html"><![CDATA[<h3 id="v-bind是vue中提供的绑定属性的指令">v-bind是Vue中提供的绑定属性的指令。</h3>
<p>v-bind 指令被用来响应地更新 HTML 属性，其实它是支持一个单一 JavaScript 表达式 （v-for 除外）。<br>
完整语法：<code>&lt;span v-bind:class=&quot;classProperty&quot;&gt;&lt;/span &gt;</code>，解释：v-bind 是指令，: 后面的 class 是参数，classProperty 则在官方文档中被称为“预期值”。<br>
缩写语法：<code>&lt;span :class=&quot;classProperty&quot;&gt;&lt;/span &gt;</code>，解释：: 后面的 class 是参数，classProperty 则在官方文档中被称为“预期值”。</p>
<!-- more -->
<p>格式:<br>
<code>&lt;input type=&quot;button&quot; value=&quot;按钮&quot; v-bind:title=&quot;mytitle&quot;&gt;</code></p>
<pre><code>var vm = new Vue({
            el: '#app',
            data:{
                mytitle: '定义的title'
            }
        })
</code></pre>
<h3 id="v-bind加变量的表达式">v-bind加变量的表达式</h3>
<pre><code>&lt;input type=&quot;button&quot; value=&quot;按钮&quot; v-bind:title=&quot;mytitle + ' 123'&quot;&gt;
</code></pre>
<h4 id="v-bind简写">v-bind简写</h4>
<pre><code>&lt;input type=&quot;button&quot; value=&quot;按钮&quot; :title=&quot;mytitle + ' 123'&quot;&gt;
</code></pre>
<p>注意:</p>
<ol>
<li><code>v-bind:</code>指令可以简写为<code>:要绑定的属性</code>。</li>
<li>v-bind中可以合法写JS表达式。</li>
</ol>
<h3 id="v-on-事件绑定机制">v-on 事件绑定机制</h3>
<pre><code>&lt;input type=&quot;button&quot; value=&quot;按钮&quot; v-on:click=&quot;show&quot;&gt;
 methods:{//这个methods属性定义了当前vue实例所有可用的方法
                show: function(){
                    alert('yes')
                }
            }
</code></pre>
<h4 id="v-on简写">v-on简写</h4>
<pre><code>&lt;input type=&quot;button&quot; value=&quot;按钮&quot; @click=&quot;show&quot;&gt;
 methods:{//这个methods属性定义了当前vue实例所有可用的方法
                show(){
                    alert('yes')
                }
            }
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue学习(二): v-cloak、v-text、v-html]]></title>
        <id>https://ihopefulchina.github.io/post/vue-xue-xi-er-v-cloakv-textv-html</id>
        <link href="https://ihopefulchina.github.io/post/vue-xue-xi-er-v-cloakv-textv-html">
        </link>
        <updated>2019-09-03T03:11:58.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="使用-v-cloak插值表达式能够解决插值表达式闪烁问题">使用 v-cloak(插值表达式)能够解决插值表达式闪烁问题</h3>
<p>可以使用 v-cloak 指令设置样式，这些样式会在 Vue 实例编译结束时，从绑定的 HTML 元素上被移除。<br>
当网络较慢，网页还在加载 Vue.js ，而导致 Vue 来不及渲染，这时页面就会显示出 Vue 源代码。我们可以使用 v-cloak 指令来解决这一问题。</p>
]]></summary>
        <content type="html"><![CDATA[<h3 id="使用-v-cloak插值表达式能够解决插值表达式闪烁问题">使用 v-cloak(插值表达式)能够解决插值表达式闪烁问题</h3>
<p>可以使用 v-cloak 指令设置样式，这些样式会在 Vue 实例编译结束时，从绑定的 HTML 元素上被移除。<br>
当网络较慢，网页还在加载 Vue.js ，而导致 Vue 来不及渲染，这时页面就会显示出 Vue 源代码。我们可以使用 v-cloak 指令来解决这一问题。</p>
<!-- more -->
<pre><code>&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;style&gt;
    [v-cloak]{
        display: none;
    }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id=&quot;app&quot;&gt;
        &lt;!--使用 v-cloak能够解决插值表达式闪烁问题--&gt;
        &lt;p v-cloak&gt;{{msg}}&lt;/p&gt;
    &lt;/div&gt;
    &lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;
    &lt;script&gt;
        var vm = new Vue({
            el: '#app',
            data:{
                msg: '123'
            }
        })
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="v-text的使用与v-cloak的区别">v-text的使用与v-cloak的区别</h3>
<pre><code>&lt;h4 v-text=&quot;msg&quot;&gt;&lt;/h4&gt;
</code></pre>
<p><strong>v-text与v-cloak区别</strong></p>
<ol>
<li>默认v-text是没有闪烁问题，但v-cloak有闪烁，需要写一个<code>[v-cloak]{display:none}</code></li>
<li>v-cloak可以前后放任意内容，v-text只能放v-text的值（会覆盖元素原本的内容）</li>
</ol>
<h3 id="v-html-能够输出html标签">v-html 能够输出html标签</h3>
<pre><code>&lt;div v-html=&quot;msg2&quot;&gt;&lt;/div&gt;
var vm = new Vue({
            el: '#app',
            data:{
                msg2: '&lt;h1&gt;这是H1标签&lt;/h1&gt;'
            }
        })
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue学习(一): Vue的MVVM]]></title>
        <id>https://ihopefulchina.github.io/post/vue-xue-xi-yi-vue-de-mvvm</id>
        <link href="https://ihopefulchina.github.io/post/vue-xue-xi-yi-vue-de-mvvm">
        </link>
        <updated>2019-09-03T02:25:33.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="1node后端中的mvc与前端中的mvvm之间的区别">1.Node(后端)中的MVC与前端中的MVVM之间的区别</h3>
<ul>
<li>MVC是后端分层开发概念。</li>
<li>MVVM是前端视图层的概念，主要关注于视图分层，也就是说:MVVM把前端的分为了三部分,Model, VM 和 ViewModel</li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<h3 id="1node后端中的mvc与前端中的mvvm之间的区别">1.Node(后端)中的MVC与前端中的MVVM之间的区别</h3>
<ul>
<li>MVC是后端分层开发概念。</li>
<li>MVVM是前端视图层的概念，主要关注于视图分层，也就是说:MVVM把前端的分为了三部分,Model, VM 和 ViewModel</li>
</ul>
<!-- more -->
<h3 id="2vue处理逻辑过程">2.Vue处理逻辑过程</h3>
<p><img src="https://ihopefulchina.github.io/post-images/1567477853059.png" alt=""></p>
<h3 id="3vue基本代码和mvvm之间对应关系">3.Vue基本代码和MVVM之间对应关系</h3>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;
	&lt;title&gt;&lt;/title&gt;
    &lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;!--将来 new这个Vue实例控制这个元素所有内容 
    Vue实例所控制的这个元素区域，就是我们的 V --&gt;
&lt;div id=&quot;app&quot;&gt;
    &lt;p&gt;{{ msg }}&lt;/p&gt;

&lt;/div&gt;
&lt;script&gt;
//创建实例
//当我们导入包之后，在浏览器内存中，就多了一个Vue构造函数
//我们New出来的这个vm对象，就是我们MVVM中的VM调度者
 var vm = new Vue({
     el: '#app', //表示当前我们New这个Vue实例，要控制页面哪个区域
     data:{
         //data 属性中，存放的是el中需要的数据
         msg: 'Vue学习' //通过Vue提供的指令，很方便把数据渲染到页面上，程序员不在手动操作DOM元素[前端框架Vue之类的框架，不提倡我们手动操作DOM 元素]
     }
     //这里的data就是MVVM的M，专门保存每个页面的数据的
})
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[国内优酷分享API一些坑]]></title>
        <id>https://ihopefulchina.github.io/post/guo-nei-you-ku-fen-xiang-api-yi-xie-keng</id>
        <link href="https://ihopefulchina.github.io/post/guo-nei-you-ku-fen-xiang-api-yi-xie-keng">
        </link>
        <updated>2019-08-23T08:57:46.000Z</updated>
        <summary type="html"><![CDATA[<p>Youtube分享API功能很全，今天客户需要多个视频在放在国内优酷平台的要求。<br>
过程遇到了一些坑【忠告各位远离优酷】：</p>
]]></summary>
        <content type="html"><![CDATA[<p>Youtube分享API功能很全，今天客户需要多个视频在放在国内优酷平台的要求。<br>
过程遇到了一些坑【忠告各位远离优酷】：</p>
<!-- more -->
<p>1.iframe分享是可以的，但是不能做很多扩展功能，所以需要JS加载，但是client_id必须要有，所以需要申请API账号，但是不支持个人申请(wqnmd)。</p>
<p>2.申请好了，之后，我看了一下<a href="https://cloud.youku.com/tools">官方文档</a>,咦，很简单嘛。</p>
<pre><code>&lt;div id=&quot;youkuplayer&quot;style=&quot;width:580px;height:326px&quot;&gt;&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;//player.youku.com/jsapi&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
var player = new YKU.Player('youkuplayer',{
styleid: '0',
client_id: 'YOUR YOUKUOPENAPI CLIENT_ID',
vid: '替换成优酷视频ID',
newPlayer: true
});
&lt;/script&gt;
</code></pre>
<p>一目了然，我贴上去，是在循环里面写的加了一些参数</p>
<pre><code>&lt;div id=&quot;youkuplayer-&lt;?php echo $i;?&gt;&quot; style=&quot;width: 862px!important; height: 445px!important;&quot;&gt;&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
var player_&lt;?php echo $i;?&gt; = new YKU.Player('youkuplayer-&lt;?php echo $i;?&gt;',{
client_id: 'XXX',                    
vid: '&lt;?php echo substr($video_link,30,-5); ?&gt;',
});
function pauseVideo_&lt;?php echo $i;?&gt;(){
player_&lt;?php echo $i;?&gt;.pauseVideo(); 
}
&lt;/script&gt;
</code></pre>
<p>3.我特意加了暂停视频按钮事件pauseVideo（客户需求是切换或者播放一个视频，再播放另一个视频的话，已经播放的暂停【优酷不支持！！】），一切大功告成，然后我测试，暂停功能不行，我以为我写错了，排查发现没有，怎么测试都没找到问题，查阅了很多文档，百度了很多，没有人提过这个问题。</p>
<p>4.我灵光一现，移动端试试。我去，移动端没有问题，我苦恼PC端问题出现在哪里，我最好找到了，在<code>&lt;script type=&quot;text/javascript&quot; src=&quot;//player.youku.com/jsapi&quot;&gt;&lt;/script&gt;</code>后面加一个<code>&lt;script type=&quot;text/javascript&quot;&gt;YKP.isPC = false;&lt;/script&gt;</code>，这个意思是PC端也跟移动端一样效果。</p>
<p>5.然后又有问题了，在视频里面点击播放，ok没问题，再点击一次就不能暂停了。。。原来是PC端也跟移动端一样效果，但是移动端是触摸的啊，所以我在视频DIV加了一个点击事件。</p>
<pre><code>var j = 0;
$('#youkuplayer-&lt;?php echo $i;?&gt;').click(function () {
if (j == 0) {
player_&lt;?php echo $i;?&gt;.playVideo();
j = 1;
} else {
player_&lt;?php echo $i;?&gt;.pauseVideo();
j = 0;
}
});
</code></pre>
<p>6.期间遇到视频外层DIV(youkuplayer-<?php echo $i;?>),宽度和高度都是0（明明css和行内都给了值，最后2个都加上<code>!important</code>才行）</p>
<p>以上是我遇到国内优酷分享API一些坑，还有分享视频播放居然要广告，感觉很麻烦，优酷偌大的公司，代码写的水平跟我一样差，也是醉了。</p>
<p>贴上我的Demo:</p>
<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;//player.youku.com/jsapi&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;YKP.isPC = false;&lt;/script&gt;
&lt;?php if( have_rows('home_slider',89) ):?&gt;
&lt;?php while( have_rows('home_slider',89) ): the_row();?&gt;
&lt;?php if( have_rows('video_link',89) ): ?&gt;
&lt;div class=&quot;modal fade bd-example-modal-xl&quot; id=&quot;myModal-1&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot; aria-labelledby=&quot;exampleModalCenterTitle&quot; aria-hidden=&quot;true&quot;&gt;
&lt;div class=&quot;modal-dialog-centered&quot; role=&quot;document&quot;&gt;
&lt;div class=&quot;modal-dialog modal-xl&quot;&gt;
&lt;div class=&quot;home-modal-video modal-content&quot;&gt;
&lt;button type=&quot;button&quot; class=&quot;close home-modal-video-close&quot; data-dismiss=&quot;modal&quot; aria-hidden=&quot;true&quot;&gt;&amp;times;&lt;/button&gt;
&lt;div class=&quot;tabs-vertical&quot;&gt;
&lt;ul&gt;
&lt;?php $i=0; while( have_rows('video_link',89) ): the_row();
$video_title = get_sub_field('video_link_title');
?&gt;
&lt;li&gt;&lt;a onclick=&quot;pauseVideo_&lt;?php echo $i+2;?&gt;()&quot; data-index=&quot;&lt;?php echo $i;?&gt;&quot; href=&quot;#&quot;&gt; &lt;?php echo $video_title;?&gt;&lt;/a&gt;&lt;/li&gt;
&lt;?php $i++; endwhile; ?&gt;
&lt;/ul&gt;
&lt;div class=&quot;tabs-content-placeholder&quot;&gt;
&lt;?php $i=1; while( have_rows('video_link',89) ): the_row();
$video_content = get_sub_field('video_link_content');
$video_link = get_sub_field('video_link_link');
$i++;
?&gt;
&lt;div class=&quot;youkuplayer-youku&quot;&gt;
&lt;p&gt;&lt;?php echo $video_content;?&gt;&lt;/p&gt;
&lt;div id=&quot;youkuplayer-&lt;?php echo $i;?&gt;&quot; style=&quot;width: 862px!important; height: 445px!important;&quot;&gt;&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
var player_&lt;?php echo $i;?&gt; = new YKU.Player('youkuplayer-&lt;?php echo $i;?&gt;',{
client_id: 'XXX',                    
vid: '&lt;?php echo substr($video_link,30,-5); ?&gt;',
});
function pauseVideo_&lt;?php echo $i;?&gt;(){
player_&lt;?php echo $i;?&gt;.pauseVideo(); 
}
var j = 0;
$('#youkuplayer-&lt;?php echo $i;?&gt;').click(function () {
if (j == 0) {
player_&lt;?php echo $i;?&gt;.playVideo();
j = 1;
} else {
player_&lt;?php echo $i;?&gt;.pauseVideo();
j = 0;
}
});
&lt;/script&gt;
&lt;/div&gt;
&lt;?php endwhile; ?&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;?php endif; ?&gt;
&lt;?php endwhile; ?&gt;
&lt;?php endif; ?&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[获取当前分类下的所有子分类]]></title>
        <id>https://ihopefulchina.github.io/post/huo-qu-dang-qian-fen-lei-xia-de-suo-you-zi-fen-lei</id>
        <link href="https://ihopefulchina.github.io/post/huo-qu-dang-qian-fen-lei-xia-de-suo-you-zi-fen-lei">
        </link>
        <updated>2019-08-22T07:17:48.000Z</updated>
        <summary type="html"><![CDATA[<p>一般用于taxonomy分类页面，比如产品products，下面有a这个分类，a下面有a-1,a-2,a-3...</p>
<p>如何在进入a分类这个页面的时候，输出这个a下面的子分类？</p>
]]></summary>
        <content type="html"><![CDATA[<p>一般用于taxonomy分类页面，比如产品products，下面有a这个分类，a下面有a-1,a-2,a-3...</p>
<p>如何在进入a分类这个页面的时候，输出这个a下面的子分类？</p>
<!-- more -->
<p>解决思路:<br>
1.首先通过<code>get_categories</code>获取所有分类的slug和id</p>
<pre><code>$test = get_categories(&quot;taxonomy=product&amp;hide_empty=0&quot;);
						$cats=array(); 
						foreach($test as $tmpcat){
							if($tmpcat-&gt;parent==0){
								$cats[$tmpcat-&gt;term_id]['slug']=$tmpcat-&gt;slug;
								$cats[$tmpcat-&gt;term_id]['term_id']=$tmpcat-&gt;term_id;
							}
						}
</code></pre>
<p>3.然后切割分组当前url，判断slug是否等于当前的url</p>
<pre><code>$uri=explode('/',$_SERVER['REQUEST_URI']);
</code></pre>
<p>5.等于的话，再根据<code>get_categories</code>加上child_of=，最后foreach输出所有分类。</p>
<pre><code>foreach($cats as $key=&gt;$val){
							if($cats[$key]['slug']==$uri[2]){
								$id = $cats[$key]['term_id'];
								$cate = get_categories(&quot;depth=0&amp;hide_empty=0&amp;title_li=&amp;orderby=ID&amp;order=ASC&amp;taxonomy=product&amp;child_of=$id&quot;);
								foreach ($cate as $key =&gt; $value) {?&gt;
									&lt;div class=&quot;swiper-slide&quot;&gt;
										&lt;li class=&quot;cat-item&lt;?php if($value-&gt;slug == $uri[3]){ echo ' current-cat';}?&gt;&quot;&gt;&lt;a href=&quot;/products/&lt;?php echo $uri[2];?&gt;/&lt;?php echo $value-&gt;slug; ?&gt;/&quot;&gt;&lt;?php echo $value-&gt;name;?&gt;&lt;/a&gt;&lt;/li&gt;
									&lt;/div&gt;
								&lt;?php }
							}
						}
</code></pre>
<p>完整的</p>
<pre><code>&lt;?php 
						$test = get_categories(&quot;taxonomy=product&amp;hide_empty=0&quot;);
						$cats=array(); 
						foreach($test as $tmpcat){
							if($tmpcat-&gt;parent==0){
								$cats[$tmpcat-&gt;term_id]['slug']=$tmpcat-&gt;slug;
								$cats[$tmpcat-&gt;term_id]['term_id']=$tmpcat-&gt;term_id;
							}
						}
						foreach($cats as $key=&gt;$val){
							if($cats[$key]['slug']==$uri[2]){
								$id = $cats[$key]['term_id'];
								$cate = get_categories(&quot;depth=0&amp;hide_empty=0&amp;title_li=&amp;orderby=ID&amp;order=ASC&amp;taxonomy=product&amp;child_of=$id&quot;);
								foreach ($cate as $key =&gt; $value) {?&gt;
									&lt;div class=&quot;swiper-slide&quot;&gt;
										&lt;li class=&quot;cat-item&lt;?php if($value-&gt;slug == $uri[3]){ echo ' current-cat';}?&gt;&quot;&gt;&lt;a href=&quot;/products/&lt;?php echo $uri[2];?&gt;/&lt;?php echo $value-&gt;slug; ?&gt;/&quot;&gt;&lt;?php echo $value-&gt;name;?&gt;&lt;/a&gt;&lt;/li&gt;
									&lt;/div&gt;
								&lt;?php }
							}
						}
						?&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何解决页面/文章/详情页需要不同样式、模板的问题？]]></title>
        <id>https://ihopefulchina.github.io/post/ru-he-jie-jue-ye-mian-wen-zhang-xiang-qing-ye-xu-yao-bu-tong-yang-shi-mo-ban-de-wen-ti</id>
        <link href="https://ihopefulchina.github.io/post/ru-he-jie-jue-ye-mian-wen-zhang-xiang-qing-ye-xu-yao-bu-tong-yang-shi-mo-ban-de-wen-ti">
        </link>
        <updated>2019-08-22T06:48:25.000Z</updated>
        <summary type="html"><![CDATA[<p>遇到一个客户，他的需求是在产品详情页有5套不同的模板，需要在后台自己可以选择不同模板，填写不同的内容。</p>
<p>一开始知道这个需求很懵，后来我理清楚了思路，解决了这个问题:</p>
]]></summary>
        <content type="html"><![CDATA[<p>遇到一个客户，他的需求是在产品详情页有5套不同的模板，需要在后台自己可以选择不同模板，填写不同的内容。</p>
<p>一开始知道这个需求很懵，后来我理清楚了思路，解决了这个问题:</p>
<!-- more -->
<ol>
<li>
<p>首先通过<a href="https://www.advancedcustomfields.com/resources/radio-button/">ACF插件Seclect的单选按钮</a>，填写5个参数<br>
(注: 参数' : '前后需要有空格)<br>
<img src="https://ihopefulchina.github.io/post-images/1566457009571.png" alt=""></p>
</li>
<li>
<p>通过<a href="https://www.advancedcustomfields.com/resources/group/">ACF插件的组</a>来写5个模板(组下面填写不同的自定义字段)</p>
</li>
</ol>
<p><img src="https://ihopefulchina.github.io/post-images/1566456898881.png" alt=""></p>
<p>注:<br>
(1)需要填写判断(条件逻辑)</p>
<p><img src="https://ihopefulchina.github.io/post-images/1566457679886.png" alt=""></p>
<p>(2)其中每个模板Group里面的说明最好加上模板图片样式，例如<code>&lt;img src=&quot;/wp-admin/images/sj.png&quot; width=&quot;50%&quot; height=&quot;auto&quot;&gt;</code><br>
这么做的目的，是客户知道这是哪个模板样式，呈现的效果如下。</p>
<p><img src="https://ihopefulchina.github.io/post-images/1566457148348.png" alt=""></p>
<p>3.然后创建5个php，命名规避page，single等等自带的命名方式，里面填写各自模板样式和参数。</p>
<p><img src="https://ihopefulchina.github.io/post-images/1566457258241.png" alt=""></p>
<p>5.最后在single-products.php里面，加一个判断:</p>
<pre><code>&lt;?php if( get_field('select') == 'one' ): ?&gt;
		&lt;?php include 'product-content1.php'; ?&gt;
	&lt;?php endif; ?&gt;

	&lt;?php if( get_field('select') == 'two' ): ?&gt;
		&lt;?php include 'product-content2.php'; ?&gt;
	&lt;?php endif; ?&gt;

	&lt;?php if( get_field('select') == 'three' ): ?&gt;
		&lt;?php include 'product-content3.php'; ?&gt;
	&lt;?php endif; ?&gt;

	&lt;?php if( get_field('select') == 'four' ): ?&gt;
		&lt;?php include 'product-content4.php'; ?&gt;
	&lt;?php endif; ?&gt;

	&lt;?php if( get_field('select') == 'five' ): ?&gt;
		&lt;?php include 'product-content5.php'; ?&gt;
	&lt;?php endif; ?&gt;
</code></pre>
<p>其中的one，two... 来自ACF插件Seclect的单选按钮前面的参数</p>
]]></content>
    </entry>
</feed>